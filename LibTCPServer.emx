<?xml version="1.0" encoding="UTF-8"?>
<!--xtools2_universal_type_manager-->
<!--DevOps Model RealTime 12.0.1-->
<?com.ibm.xtools.emf.core.signature <signature id="com.ibm.xtools.uml.msl.model" version="7.0.0"><feature description="" name="com.ibm.xtools.ruml.feature" url="" version="7.0.0"/></signature>?>
<?com.ibm.xtools.emf.core.signature <signature id="com.ibm.xtools.mmi.ui.signatures.diagram" version="7.0.0"><feature description="" name="RTist Modeling Platform (com.ibm.xtools.rmp)" url="" version="7.0.0"/></signature>?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:CppPropertySets="http:///schemas/CppPropertySets/_5TG7AMk4EeO2m9WtkWjeeQ/67" xmlns:Default="http:///schemas/Default/_fNm3AAqoEd6-N_NOT9vsCA/2" xmlns:Standard="http://www.eclipse.org/uml2/schemas/Standard/1" xmlns:UMLRealTime="http:///schemas/UMLRealTime/_3TUzoHq6Ed2hSeAAWZznoA/119" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:notation="http://www.eclipse.org/gmf/runtime/1.0.3/notation" xmlns:uml="http://www.eclipse.org/uml2/3.0.0/UML" xmlns:umlnotation="http://www.ibm.com/xtools/1.5.3/Umlnotation" xsi:schemaLocation="http:///schemas/CppPropertySets/_5TG7AMk4EeO2m9WtkWjeeQ/67 pathmap://CPP_LANGUAGE_PROFILE/CppPropertySets.epx#_5TYAwMk4EeO2m9WtkWjeeQ?CppPropertySets/CppPropertySets? http:///schemas/Default/_fNm3AAqoEd6-N_NOT9vsCA/2 pathmap://UML2_MSL_PROFILES/Default.epx#_fNwoAAqoEd6-N_NOT9vsCA?Default/Default? http://www.eclipse.org/uml2/schemas/Standard/1 pathmap://UML_PROFILES/Standard.profile.uml#_yzU58YinEdqtvbnfB2L_5w http:///schemas/UMLRealTime/_3TUzoHq6Ed2hSeAAWZznoA/119 pathmap://RT_PROPERTIES/UMLRealTime.epx#_3TUzoXq6Ed2hSeAAWZznoA?UMLRealTime/UMLRealTime?">
  <uml:Package xmi:id="_n2OxwO5SEeitL-zKjjNp2A" name="LibTCPServer">
    <eAnnotations xmi:id="_n2Oxwe5SEeitL-zKjjNp2A" source="uml2.diagrams" references="_n2Oxwu5SEeitL-zKjjNp2A">
      <contents xmi:type="umlnotation:UMLDiagram" xmi:id="_n2Oxwu5SEeitL-zKjjNp2A" type="Class" name="API">
        <children xmi:type="umlnotation:UMLShape" xmi:id="_9AeFcO5TEeitL-zKjjNp2A" element="_5rHTMO5TEeitL-zKjjNp2A" fontName="Segoe UI" fontHeight="8" transparency="0" lineColor="14263149" lineWidth="1" showStereotype="Label">
          <children xmi:type="notation:DecorationNode" xmi:id="_9AesgO5TEeitL-zKjjNp2A" type="ImageCompartment">
            <layoutConstraint xmi:type="notation:Size" xmi:id="_9Aesge5TEeitL-zKjjNp2A" width="1320" height="1320"/>
          </children>
          <children xmi:type="notation:BasicDecorationNode" xmi:id="_9Aesgu5TEeitL-zKjjNp2A" type="Stereotype"/>
          <children xmi:type="notation:BasicDecorationNode" xmi:id="_9Aesg-5TEeitL-zKjjNp2A" type="Name"/>
          <children xmi:type="notation:BasicDecorationNode" xmi:id="_9AeshO5TEeitL-zKjjNp2A" type="Parent"/>
          <children xmi:type="notation:SemanticListCompartment" xmi:id="_9Aeshe5TEeitL-zKjjNp2A" type="AttributeCompartment"/>
          <children xmi:type="notation:SemanticListCompartment" xmi:id="_9AfTkO5TEeitL-zKjjNp2A" type="OperationCompartment"/>
          <children xmi:type="notation:SemanticListCompartment" xmi:id="_9AfTke5TEeitL-zKjjNp2A" visible="false" type="SignalCompartment"/>
          <children xmi:type="umlnotation:UMLShapeCompartment" xmi:id="_9AfTku5TEeitL-zKjjNp2A" visible="false" type="StructureCompartment"/>
          <children xmi:id="_9AfTk-5TEeitL-zKjjNp2A" type="portCompartment">
            <styles xmi:type="notation:DrawerStyle" xmi:id="_9AfTlO5TEeitL-zKjjNp2A"/>
            <styles xmi:type="notation:TitleStyle" xmi:id="_9AfTle5TEeitL-zKjjNp2A"/>
            <styles xmi:type="notation:SortingStyle" xmi:id="_9AfTlu5TEeitL-zKjjNp2A"/>
            <styles xmi:type="notation:FilteringStyle" xmi:id="_9AfTl-5TEeitL-zKjjNp2A"/>
          </children>
          <layoutConstraint xmi:type="notation:Bounds" xmi:id="_9AeFce5TEeitL-zKjjNp2A" x="7112" y="2159"/>
        </children>
        <children xmi:type="umlnotation:UMLShape" xmi:id="__TUR0O5TEeitL-zKjjNp2A" element="_5rKWgO5TEeitL-zKjjNp2A" fontName="Segoe UI" fontHeight="8" transparency="0" lineColor="14263149" lineWidth="1" showStereotype="Label">
          <children xmi:type="notation:DecorationNode" xmi:id="__TUR0u5TEeitL-zKjjNp2A" type="ImageCompartment">
            <layoutConstraint xmi:type="notation:Size" xmi:id="__TUR0-5TEeitL-zKjjNp2A" width="1320" height="1320"/>
          </children>
          <children xmi:type="notation:BasicDecorationNode" xmi:id="__TU44O5TEeitL-zKjjNp2A" type="Stereotype"/>
          <children xmi:type="notation:BasicDecorationNode" xmi:id="__TU44e5TEeitL-zKjjNp2A" type="Name"/>
          <children xmi:type="notation:BasicDecorationNode" xmi:id="__TU44u5TEeitL-zKjjNp2A" type="Parent"/>
          <children xmi:type="notation:SemanticListCompartment" xmi:id="__TU44-5TEeitL-zKjjNp2A" type="AttributeCompartment"/>
          <children xmi:type="notation:SemanticListCompartment" xmi:id="__TU45O5TEeitL-zKjjNp2A" type="OperationCompartment"/>
          <children xmi:type="notation:SemanticListCompartment" xmi:id="__TVf8O5TEeitL-zKjjNp2A" visible="false" type="SignalCompartment"/>
          <children xmi:type="umlnotation:UMLShapeCompartment" xmi:id="__TVf8e5TEeitL-zKjjNp2A" visible="false" type="StructureCompartment"/>
          <layoutConstraint xmi:type="notation:Bounds" xmi:id="__TUR0e5TEeitL-zKjjNp2A" x="15494" y="2413"/>
        </children>
        <children xmi:type="notation:Shape" xmi:id="_DUwG8O5UEeitL-zKjjNp2A" type="Note" fontName="Segoe UI" fontHeight="8" description="&lt;p>Inherit from this capsule and create a part typed by the inherited capsule in your application. This will enable it to receive incoming requests over TCP. The requests are by default assumed to be JSON encoded and in a certain format, which for example allows to send events via the ports of the inherited capsule to other capsules in the application. However, by overriding &lt;b>handleReceivedMessageCustom()&lt;/b> you can implement custom handling of incoming requests.&lt;/p>&lt;p>All configuration of the TCPServer capsule is done by means of the TCPServer_Config data class.&lt;/p>&lt;p>See &lt;a href=&quot;https://github.com/hcl-pnp-rtist/lib-tcp-server&quot; rel=&quot;&quot;>the GitHub repository&lt;/a> for information about the JSON format that is supported by default.&lt;/p>" fillColor="13956346" transparency="0" lineColor="12632258" lineWidth="1">
          <children xmi:type="notation:BasicDecorationNode" xmi:id="_DUxVEO5UEeitL-zKjjNp2A" type="DiagramName">
            <element xsi:nil="true"/>
          </children>
          <children xmi:type="notation:BasicDecorationNode" xmi:id="_DUxVEe5UEeitL-zKjjNp2A" type="Description">
            <element xsi:nil="true"/>
          </children>
          <styles xmi:type="notation:TextStyle" xmi:id="_DUwG8e5UEeitL-zKjjNp2A"/>
          <styles xmi:type="notation:LineTypeStyle" xmi:id="_DUwG8u5UEeitL-zKjjNp2A"/>
          <element xsi:nil="true"/>
          <layoutConstraint xmi:type="notation:Bounds" xmi:id="_DUwG8-5UEeitL-zKjjNp2A" x="889" y="2159" width="5607" height="7494"/>
        </children>
        <children xmi:type="notation:Shape" xmi:id="_kdX4MO5VEeitL-zKjjNp2A" type="Note" fontName="Segoe UI" fontHeight="8" description="&lt;p>Library for letting an DevOps Model RealTime application communicate over TCP with other applications. For example, external applications can use it to send events into the DevOps Model RealTime application.&lt;/p>" fillColor="13956346" transparency="0" lineColor="12632258" lineWidth="1">
          <children xmi:type="notation:BasicDecorationNode" xmi:id="_kdYfQO5VEeitL-zKjjNp2A" type="DiagramName">
            <element xsi:nil="true"/>
          </children>
          <children xmi:type="notation:BasicDecorationNode" xmi:id="_kdYfQe5VEeitL-zKjjNp2A" type="Description">
            <element xsi:nil="true"/>
          </children>
          <styles xmi:type="notation:TextStyle" xmi:id="_kdX4Me5VEeitL-zKjjNp2A"/>
          <styles xmi:type="notation:LineTypeStyle" xmi:id="_kdX4Mu5VEeitL-zKjjNp2A"/>
          <element xsi:nil="true"/>
          <layoutConstraint xmi:type="notation:Bounds" xmi:id="_kdX4M-5VEeitL-zKjjNp2A" x="889" y="381" width="17926"/>
        </children>
        <children xmi:type="umlnotation:UMLClassifierShape" xmi:id="_Wz-04O5WEeitL-zKjjNp2A" element="_Vq7iIO5WEeitL-zKjjNp2A" fontName="Segoe UI" fontHeight="8" transparency="0" lineColor="14263149" lineWidth="1" showStereotype="Label" useClassifierShape="true">
          <children xmi:type="notation:DecorationNode" xmi:id="_Wz-04u5WEeitL-zKjjNp2A" type="ImageCompartment">
            <layoutConstraint xmi:type="notation:Size" xmi:id="_Wz-04-5WEeitL-zKjjNp2A" width="530" height="530"/>
          </children>
          <children xmi:type="notation:BasicDecorationNode" xmi:id="_Wz-05O5WEeitL-zKjjNp2A" type="Stereotype"/>
          <children xmi:type="notation:BasicDecorationNode" xmi:id="_Wz-05e5WEeitL-zKjjNp2A" type="Kind"/>
          <children xmi:type="notation:BasicDecorationNode" xmi:id="_Wz_b8O5WEeitL-zKjjNp2A" type="Name"/>
          <children xmi:type="notation:BasicDecorationNode" xmi:id="_Wz_b8e5WEeitL-zKjjNp2A" type="Parent"/>
          <children xmi:type="notation:SemanticListCompartment" xmi:id="_Wz_b8u5WEeitL-zKjjNp2A" type="AttributeCompartment"/>
          <children xmi:type="notation:SemanticListCompartment" xmi:id="_Wz_b8-5WEeitL-zKjjNp2A" type="OperationCompartment"/>
          <children xmi:type="notation:SemanticListCompartment" xmi:id="_Wz_b9O5WEeitL-zKjjNp2A" visible="false" type="SignalCompartment"/>
          <layoutConstraint xmi:type="notation:Bounds" xmi:id="_Wz-04e5WEeitL-zKjjNp2A" x="16637" y="8128"/>
        </children>
        <children xmi:type="notation:Shape" xmi:id="_oWKSMO5WEeitL-zKjjNp2A" type="Note" fontName="Segoe UI" fontHeight="8" description="&lt;p>Represents an ongoing TCP connection. Call the &lt;b>reply()&lt;/b> operation to write a reply message to the remote application, and then terminate the connection.&lt;/p>" fillColor="13956346" transparency="0" lineColor="12632258" lineWidth="1">
          <children xmi:type="notation:BasicDecorationNode" xmi:id="_oWK5QO5WEeitL-zKjjNp2A" type="DiagramName">
            <element xsi:nil="true"/>
          </children>
          <children xmi:type="notation:BasicDecorationNode" xmi:id="_oWK5Qe5WEeitL-zKjjNp2A" type="Description">
            <element xsi:nil="true"/>
          </children>
          <styles xmi:type="notation:TextStyle" xmi:id="_oWKSMe5WEeitL-zKjjNp2A"/>
          <styles xmi:type="notation:LineTypeStyle" xmi:id="_oWKSMu5WEeitL-zKjjNp2A"/>
          <element xsi:nil="true"/>
          <layoutConstraint xmi:type="notation:Bounds" xmi:id="_oWKSM-5WEeitL-zKjjNp2A" x="9398" y="8128" width="6179"/>
        </children>
        <children xmi:type="umlnotation:UMLShape" xmi:id="_n8GW8O5XEeitL-zKjjNp2A" element="_ZJ5G4e5XEeitL-zKjjNp2A" fontName="Segoe UI" fontHeight="8" transparency="0" lineColor="14263149" lineWidth="1" showStereotype="Label">
          <children xmi:type="notation:DecorationNode" xmi:id="_n8G-AO5XEeitL-zKjjNp2A" type="ImageCompartment">
            <layoutConstraint xmi:type="notation:Size" xmi:id="_n8G-Ae5XEeitL-zKjjNp2A" width="1320" height="1320"/>
          </children>
          <children xmi:type="notation:BasicDecorationNode" xmi:id="_n8G-Au5XEeitL-zKjjNp2A" type="Stereotype"/>
          <children xmi:type="notation:BasicDecorationNode" xmi:id="_n8G-A-5XEeitL-zKjjNp2A" type="Name"/>
          <children xmi:type="notation:BasicDecorationNode" xmi:id="_n8G-BO5XEeitL-zKjjNp2A" type="Parent"/>
          <children xmi:id="_n8HlEO5XEeitL-zKjjNp2A" type="inEventCompartment">
            <styles xmi:type="notation:DrawerStyle" xmi:id="_n8HlEe5XEeitL-zKjjNp2A"/>
            <styles xmi:type="notation:TitleStyle" xmi:id="_n8HlEu5XEeitL-zKjjNp2A"/>
            <styles xmi:type="notation:SortingStyle" xmi:id="_n8HlE-5XEeitL-zKjjNp2A"/>
            <styles xmi:type="notation:FilteringStyle" xmi:id="_n8HlFO5XEeitL-zKjjNp2A"/>
          </children>
          <children xmi:id="_n8HlFe5XEeitL-zKjjNp2A" type="outEventCompartment">
            <styles xmi:type="notation:DrawerStyle" xmi:id="_n8HlFu5XEeitL-zKjjNp2A"/>
            <styles xmi:type="notation:TitleStyle" xmi:id="_n8HlF-5XEeitL-zKjjNp2A"/>
            <styles xmi:type="notation:SortingStyle" xmi:id="_n8HlGO5XEeitL-zKjjNp2A"/>
            <styles xmi:type="notation:FilteringStyle" xmi:id="_n8HlGe5XEeitL-zKjjNp2A"/>
          </children>
          <layoutConstraint xmi:type="notation:Bounds" xmi:id="_n8GW8e5XEeitL-zKjjNp2A" x="16637" y="10922"/>
        </children>
        <element xsi:nil="true"/>
        <edges xmi:type="umlnotation:UMLConnector" xmi:id="__Ta_gO5TEeitL-zKjjNp2A" element="_5rLkoO5TEeitL-zKjjNp2A" source="_9AeFcO5TEeitL-zKjjNp2A" target="__TUR0O5TEeitL-zKjjNp2A" fontName="Segoe UI" fontHeight="8" roundedBendpointsRadius="4" routing="Rectilinear" lineColor="8421504" lineWidth="1" showStereotype="Text">
          <children xmi:type="notation:DecorationNode" xmi:id="__TbmkO5TEeitL-zKjjNp2A" type="NameLabel">
            <children xmi:type="notation:BasicDecorationNode" xmi:id="__Tbmku5TEeitL-zKjjNp2A" type="Stereotype"/>
            <children xmi:type="notation:BasicDecorationNode" xmi:id="__Tbmk-5TEeitL-zKjjNp2A" type="Name"/>
            <layoutConstraint xmi:type="notation:Bounds" xmi:id="__Tbmke5TEeitL-zKjjNp2A" y="-149"/>
          </children>
          <children xmi:type="notation:DecorationNode" xmi:id="__TbmlO5TEeitL-zKjjNp2A" type="ToMultiplicityLabel" element="_5rLkoe5TEeitL-zKjjNp2A">
            <children xmi:type="notation:BasicDecorationNode" xmi:id="__TcNoO5TEeitL-zKjjNp2A" type="ToMultiplicity"/>
            <layoutConstraint xmi:type="notation:Location" xmi:id="__Tbmle5TEeitL-zKjjNp2A" y="317"/>
          </children>
          <children xmi:type="notation:DecorationNode" xmi:id="__TcNoe5TEeitL-zKjjNp2A" type="ToRoleLabel" element="_5rLkoe5TEeitL-zKjjNp2A">
            <children xmi:type="notation:BasicDecorationNode" xmi:id="__TcNo-5TEeitL-zKjjNp2A" type="ToRole"/>
            <layoutConstraint xmi:type="notation:Location" xmi:id="__TcNou5TEeitL-zKjjNp2A" y="-318"/>
          </children>
          <children xmi:type="notation:DecorationNode" xmi:id="__TcNpO5TEeitL-zKjjNp2A" type="FromMultiplicityLabel" element="_5rHTN-5TEeitL-zKjjNp2A">
            <children xmi:type="notation:BasicDecorationNode" xmi:id="__TcNpu5TEeitL-zKjjNp2A" type="FromMultiplicity"/>
            <layoutConstraint xmi:type="notation:Location" xmi:id="__TcNpe5TEeitL-zKjjNp2A" y="317"/>
          </children>
          <children xmi:type="notation:DecorationNode" xmi:id="__TcNp-5TEeitL-zKjjNp2A" type="FromRoleLabel" element="_5rHTN-5TEeitL-zKjjNp2A">
            <children xmi:type="notation:BasicDecorationNode" xmi:id="__TcNqe5TEeitL-zKjjNp2A" type="FromRole"/>
            <layoutConstraint xmi:type="notation:Location" xmi:id="__TcNqO5TEeitL-zKjjNp2A" y="-318"/>
          </children>
          <children xmi:type="notation:DecorationNode" xmi:id="__TcNqu5TEeitL-zKjjNp2A" type="ToQualifierLabel" element="_5rLkoe5TEeitL-zKjjNp2A">
            <children xmi:type="notation:SemanticListCompartment" xmi:id="__Tc0se5TEeitL-zKjjNp2A" type="QualifierCompartment"/>
            <layoutConstraint xmi:type="notation:Location" xmi:id="__Tc0sO5TEeitL-zKjjNp2A" y="-149"/>
          </children>
          <children xmi:type="notation:DecorationNode" xmi:id="__Tc0su5TEeitL-zKjjNp2A" type="FromQualifierLabel" element="_5rHTN-5TEeitL-zKjjNp2A">
            <children xmi:type="notation:SemanticListCompartment" xmi:id="__Tc0tO5TEeitL-zKjjNp2A" type="QualifierCompartment"/>
            <layoutConstraint xmi:type="notation:Location" xmi:id="__Tc0s-5TEeitL-zKjjNp2A" y="-149"/>
          </children>
          <children xmi:type="notation:DecorationNode" xmi:id="__Tc0te5TEeitL-zKjjNp2A" type="ToConstraintLabel" element="_5rLkoe5TEeitL-zKjjNp2A">
            <children xmi:type="notation:ListCompartment" xmi:id="__TdbwO5TEeitL-zKjjNp2A" type="ToConstraintCompartment"/>
            <layoutConstraint xmi:type="notation:Location" xmi:id="__Tc0tu5TEeitL-zKjjNp2A" y="846"/>
          </children>
          <children xmi:type="notation:DecorationNode" xmi:id="__Tdbwe5TEeitL-zKjjNp2A" type="FromConstraintLabel" element="_5rHTN-5TEeitL-zKjjNp2A">
            <children xmi:type="notation:ListCompartment" xmi:id="__Tdbw-5TEeitL-zKjjNp2A" type="FromConstraintCompartment"/>
            <layoutConstraint xmi:type="notation:Location" xmi:id="__Tdbwu5TEeitL-zKjjNp2A" y="846"/>
          </children>
          <bendpoints xmi:type="notation:RelativeBendpoints" xmi:id="__Ta_ge5TEeitL-zKjjNp2A" points="[0, 0, 0, 0]$[0, 0, 0, 0]"/>
        </edges>
        <edges xmi:type="notation:Connector" xmi:id="_FSeX4O5UEeitL-zKjjNp2A" type="NoteAttachment" source="_9AeFcO5TEeitL-zKjjNp2A" target="_DUwG8O5UEeitL-zKjjNp2A" lineColor="0" lineWidth="1">
          <styles xmi:type="notation:ArrowStyle" xmi:id="_FSeX4e5UEeitL-zKjjNp2A"/>
          <styles xmi:type="notation:LineTypeStyle" xmi:id="_FSeX4u5UEeitL-zKjjNp2A"/>
          <element xsi:nil="true"/>
          <bendpoints xmi:type="notation:RelativeBendpoints" xmi:id="_FSeX4-5UEeitL-zKjjNp2A" points="[-117, -8, 208, 4]$[-275, -8, 50, 4]"/>
        </edges>
        <edges xmi:type="notation:Connector" xmi:id="_AzfjwO5XEeitL-zKjjNp2A" type="NoteAttachment" source="_Wz-04O5WEeitL-zKjjNp2A" target="_oWKSMO5WEeitL-zKjjNp2A" lineColor="0" lineWidth="1">
          <styles xmi:type="notation:ArrowStyle" xmi:id="_Azfjwe5XEeitL-zKjjNp2A"/>
          <styles xmi:type="notation:LineTypeStyle" xmi:id="_Azfjwu5XEeitL-zKjjNp2A"/>
          <element xsi:nil="true"/>
          <bendpoints xmi:type="notation:RelativeBendpoints" xmi:id="_Azfjw-5XEeitL-zKjjNp2A" points="[-76, -7, 77, 1]$[-152, -35, 1, -27]"/>
          <targetAnchor xmi:type="notation:IdentityAnchor" xmi:id="_Azgx4O5XEeitL-zKjjNp2A" id="(0.9111506716297135,0.37755102040816324)"/>
        </edges>
      </contents>
    </eAnnotations>
    <eAnnotations xmi:id="_n2Oxw-5SEeitL-zKjjNp2A" source="com.ibm.xtools.common.ui.reduction.editingCapabilities">
      <details xmi:id="_n2OxxO5SEeitL-zKjjNp2A" key="umldt.rt.activity" value="2"/>
      <details xmi:id="_n2Oxxe5SEeitL-zKjjNp2A" key="umldt.activity" value="2"/>
      <details xmi:id="_n2Oxxu5SEeitL-zKjjNp2A" key="uml.rt.activity" value="2"/>
      <details xmi:id="_n2Oxx-5SEeitL-zKjjNp2A" key="com.ibm.xtools.activities.cppModelingActivity" value="1"/>
    </eAnnotations>
    <packageImport xmi:id="_n2OxyO5SEeitL-zKjjNp2A">
      <eAnnotations xmi:id="_n2Oxye5SEeitL-zKjjNp2A" source="RSA_ElementImport"/>
      <importedPackage xmi:type="uml:Model" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/RTClasses.emx#_1MnNgJwwEdu4wYUZIlQWkw?RTClasses?"/>
    </packageImport>
    <packageImport xmi:id="_n2Oxyu5SEeitL-zKjjNp2A">
      <eAnnotations xmi:id="_n2Oxy-5SEeitL-zKjjNp2A" source="RSA_ElementImport"/>
      <importedPackage xmi:type="uml:Model" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_f0875BKyEdyaM9S2zG4bgA?CppPrimitiveDatatypes?"/>
    </packageImport>
    <packageImport xmi:id="_n2OxzO5SEeitL-zKjjNp2A">
      <eAnnotations xmi:id="_n2Oxze5SEeitL-zKjjNp2A" source="RSA_ElementImport"/>
      <importedPackage xmi:type="uml:Model" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/RTComponents.emx#__QdLdUB2PEd2Vrcc_Gxok_A37F129B1035A?RTComponents?"/>
    </packageImport>
    <packagedElement xmi:type="uml:Class" xmi:id="_5rHTMO5TEeitL-zKjjNp2A" name="TCPServer" clientDependency="_RtbVUO5XEeitL-zKjjNp2A">
      <eAnnotations xmi:id="_5rHTMe5TEeitL-zKjjNp2A" source="uml2.diagrams" references="_5rHTMu5TEeitL-zKjjNp2A">
        <contents xmi:type="umlnotation:UMLDiagram" xmi:id="_5rHTMu5TEeitL-zKjjNp2A" type="Structure" element="_5rHTMO5TEeitL-zKjjNp2A" measurementUnit="Himetric">
          <children xmi:type="umlnotation:UMLShape" xmi:id="_5rHTM-5TEeitL-zKjjNp2A" type="StructureDiagramFrame" element="_5rHTMO5TEeitL-zKjjNp2A" fontName="Segoe UI" fontHeight="8" transparency="0" lineColor="14263149" lineWidth="1" showStereotype="Label">
            <children xmi:type="umlnotation:UMLShapeCompartment" xmi:id="_5rHTNO5TEeitL-zKjjNp2A" type="StructureCompartment"/>
            <children xmi:type="notation:BasicDecorationNode" xmi:id="_5rHTNe5TEeitL-zKjjNp2A" type="Name"/>
            <layoutConstraint xmi:type="notation:Bounds" xmi:id="_5rHTNu5TEeitL-zKjjNp2A" x="635" y="635"/>
          </children>
        </contents>
      </eAnnotations>
      <ownedAttribute xmi:id="_5rHTN-5TEeitL-zKjjNp2A" name="config" visibility="protected" type="_5rKWgO5TEeitL-zKjjNp2A" aggregation="composite" association="_5rLkoO5TEeitL-zKjjNp2A">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_5rHTOO5TEeitL-zKjjNp2A" value="1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_5rHTOe5TEeitL-zKjjNp2A" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_5rHTO-5TEeitL-zKjjNp2A" name="external" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/RTClasses.emx#_17NVsrIlEduJc5NEaBCMOw?RTClasses/External/External?"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_5rHTPO5TEeitL-zKjjNp2A" name="control" type="_ZJ5G4e5XEeitL-zKjjNp2A" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:id="_bYC7EOTpEe6Re8YX3cK64Q" name="job" visibility="private">
        <eAnnotations xmi:id="_bYC7EeTpEe6Re8YX3cK64Q" source="com.hcl.xtools.properties">
          <details xmi:id="_bYC7EuTpEe6Re8YX3cK64Q" key="cpp/initializerKind/org.eclipse.uml2.uml.Enumeration" value="brace"/>
        </eAnnotations>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_5rHTPe5TEeitL-zKjjNp2A" name="State Machine">
        <eAnnotations xmi:id="_5rHTPu5TEeitL-zKjjNp2A" source="uml2.diagrams" references="_5rHTP-5TEeitL-zKjjNp2A">
          <contents xmi:type="umlnotation:UMLDiagram" xmi:id="_5rHTP-5TEeitL-zKjjNp2A" type="Statechart" element="_5rHTPe5TEeitL-zKjjNp2A" measurementUnit="Himetric">
            <children xmi:type="umlnotation:UMLFrame" xmi:id="_5rHTQO5TEeitL-zKjjNp2A" type="Statemachine" element="_5rHTPe5TEeitL-zKjjNp2A" fontName="Segoe UI" fontHeight="8" bold="true" transparency="0" lineColor="14263149" lineWidth="1" showStereotype="Label" alignment="Horizontal">
              <children xmi:type="umlnotation:UMLShapeCompartment" xmi:id="_5rHTQe5TEeitL-zKjjNp2A" type="Region" element="_5rHTd-5TEeitL-zKjjNp2A" verticalAlignment="false">
                <children xmi:type="umlnotation:UMLShape" xmi:id="_5rHTQu5TEeitL-zKjjNp2A" element="_5rHTeO5TEeitL-zKjjNp2A" fontName="Segoe UI" fontHeight="8" fillColor="15912618" transparency="0" lineColor="15912618" lineWidth="1" showStereotype="Label">
                  <children xmi:type="notation:DecorationNode" xmi:id="_5rHTQ-5TEeitL-zKjjNp2A" type="NameLabel">
                    <children xmi:type="notation:BasicDecorationNode" xmi:id="_5rHTRO5TEeitL-zKjjNp2A" type="Stereotype"/>
                    <children xmi:type="notation:BasicDecorationNode" xmi:id="_5rHTRe5TEeitL-zKjjNp2A" type="Name"/>
                    <children xmi:type="notation:BasicDecorationNode" xmi:id="_5rHTRu5TEeitL-zKjjNp2A" type="Parent"/>
                    <layoutConstraint xmi:type="notation:Bounds" xmi:id="_5rHTR-5TEeitL-zKjjNp2A" y="-149"/>
                  </children>
                  <layoutConstraint xmi:type="notation:Bounds" xmi:id="_5rHTSO5TEeitL-zKjjNp2A" x="3568" y="1061"/>
                </children>
                <children xmi:type="umlnotation:UMLShape" xmi:id="_5rHTSe5TEeitL-zKjjNp2A" element="_5rHTee5TEeitL-zKjjNp2A" fontName="Segoe UI" fontHeight="8" transparency="0" lineColor="14263149" lineWidth="1" showStereotype="Label">
                  <children xmi:type="notation:DecorationNode" xmi:id="_5rHTSu5TEeitL-zKjjNp2A" type="ImageCompartment">
                    <layoutConstraint xmi:type="notation:Size" xmi:id="_5rHTS-5TEeitL-zKjjNp2A" width="1320" height="1320"/>
                  </children>
                  <children xmi:type="notation:BasicDecorationNode" xmi:id="_5rHTTO5TEeitL-zKjjNp2A" type="Stereotype"/>
                  <children xmi:type="notation:BasicDecorationNode" xmi:id="_5rHTTe5TEeitL-zKjjNp2A" type="Name"/>
                  <children xmi:type="notation:BasicDecorationNode" xmi:id="_5rHTTu5TEeitL-zKjjNp2A" type="Parent"/>
                  <children xmi:type="notation:ListCompartment" xmi:id="_5rHTT-5TEeitL-zKjjNp2A" visible="false" type="Activities"/>
                  <children xmi:type="notation:ListCompartment" xmi:id="_5rHTUO5TEeitL-zKjjNp2A" visible="false" type="InternalTransitionCompartment"/>
                  <layoutConstraint xmi:type="notation:Bounds" xmi:id="_5rHTUe5TEeitL-zKjjNp2A" x="2171" y="2839" width="3022" height="1417"/>
                </children>
                <children xmi:type="umlnotation:UMLShape" xmi:id="_bd2GgO5XEeitL-zKjjNp2A" element="_bd0RUO5XEeitL-zKjjNp2A" fontName="Segoe UI" fontHeight="8" transparency="0" lineColor="14263149" lineWidth="1" showStereotype="Label">
                  <children xmi:type="notation:DecorationNode" xmi:id="_bd2Ggu5XEeitL-zKjjNp2A" type="ImageCompartment">
                    <layoutConstraint xmi:type="notation:Size" xmi:id="_bd2Gg-5XEeitL-zKjjNp2A" width="1320" height="1320"/>
                  </children>
                  <children xmi:type="notation:BasicDecorationNode" xmi:id="_bd2tkO5XEeitL-zKjjNp2A" type="Stereotype"/>
                  <children xmi:type="notation:BasicDecorationNode" xmi:id="_bd2tke5XEeitL-zKjjNp2A" type="Name"/>
                  <children xmi:type="notation:BasicDecorationNode" xmi:id="_bd2tku5XEeitL-zKjjNp2A" type="Parent"/>
                  <children xmi:type="notation:ListCompartment" xmi:id="_bd2tk-5XEeitL-zKjjNp2A" visible="false" type="Activities"/>
                  <children xmi:type="notation:ListCompartment" xmi:id="_bd2tlO5XEeitL-zKjjNp2A" visible="false" type="InternalTransitionCompartment"/>
                  <layoutConstraint xmi:type="notation:Bounds" xmi:id="_bd2Gge5XEeitL-zKjjNp2A" x="3441" y="5633"/>
                </children>
              </children>
              <children xmi:type="notation:BasicDecorationNode" xmi:id="_5rHTW-5TEeitL-zKjjNp2A" type="Name"/>
              <layoutConstraint xmi:type="notation:Bounds" xmi:id="_5rHTXO5TEeitL-zKjjNp2A" x="635" y="635"/>
            </children>
            <edges xmi:type="umlnotation:UMLConnector" xmi:id="_5rHTXe5TEeitL-zKjjNp2A" element="_5rHTfO5TEeitL-zKjjNp2A" source="_5rHTQu5TEeitL-zKjjNp2A" target="_5rHTSe5TEeitL-zKjjNp2A" fontName="Segoe UI" fontHeight="8" roundedBendpointsRadius="4" lineColor="8421504" lineWidth="1" showStereotype="Text">
              <children xmi:type="notation:DecorationNode" xmi:id="_5rHTXu5TEeitL-zKjjNp2A" type="TransitionLabelCompartment">
                <children xmi:type="notation:BasicDecorationNode" xmi:id="_5rHTX-5TEeitL-zKjjNp2A" type="Stereotype"/>
                <children xmi:type="notation:BasicDecorationNode" xmi:id="_5rHTYO5TEeitL-zKjjNp2A" type="TransitionLabel"/>
                <children xmi:type="notation:ListCompartment" xmi:id="_5rHTYe5TEeitL-zKjjNp2A" type="Triggers"/>
                <layoutConstraint xmi:type="notation:Bounds" xmi:id="_5rHTYu5TEeitL-zKjjNp2A" y="-149"/>
              </children>
              <bendpoints xmi:type="notation:RelativeBendpoints" xmi:id="_5rHTY-5TEeitL-zKjjNp2A" points="[0, 0, 0, -1270]$[0, 1270, 0, 0]"/>
              <sourceAnchor xmi:type="notation:IdentityAnchor" xmi:id="_5rHTZO5TEeitL-zKjjNp2A" id="(0.4988179669030733,1.0)"/>
              <targetAnchor xmi:type="notation:IdentityAnchor" xmi:id="_5rHTZe5TEeitL-zKjjNp2A" id="(0.5390469887491728,0.0)"/>
            </edges>
            <edges xmi:type="umlnotation:UMLConnector" xmi:id="_5rHTZu5TEeitL-zKjjNp2A" element="_5rHTgO5TEeitL-zKjjNp2A" source="_5rHTSe5TEeitL-zKjjNp2A" target="_5rHTSe5TEeitL-zKjjNp2A" fontName="Segoe UI" fontHeight="8" roundedBendpointsRadius="4" lineColor="8421504" lineWidth="1" showStereotype="Text">
              <children xmi:type="notation:DecorationNode" xmi:id="_5rHTZ-5TEeitL-zKjjNp2A" type="TransitionLabelCompartment">
                <children xmi:type="notation:BasicDecorationNode" xmi:id="_5rHTaO5TEeitL-zKjjNp2A" type="Stereotype"/>
                <children xmi:type="notation:BasicDecorationNode" xmi:id="_5rHTae5TEeitL-zKjjNp2A" type="TransitionLabel"/>
                <children xmi:type="notation:ListCompartment" xmi:id="_5rHTau5TEeitL-zKjjNp2A" type="Triggers"/>
                <layoutConstraint xmi:type="notation:Bounds" xmi:id="_5rHTa-5TEeitL-zKjjNp2A" x="-42" y="1016"/>
              </children>
              <bendpoints xmi:type="notation:RelativeBendpoints" xmi:id="_5rHTbO5TEeitL-zKjjNp2A" points="[0, 0, -127, 677]$[127, -677, 0, 0]"/>
              <sourceAnchor xmi:type="notation:IdentityAnchor" xmi:id="_5rHTbe5TEeitL-zKjjNp2A" id="(0.8752481800132362,0.7014820042342979)"/>
              <targetAnchor xmi:type="notation:IdentityAnchor" xmi:id="_5rHTbu5TEeitL-zKjjNp2A" id="(1.0,0.3577981651376147)"/>
            </edges>
            <edges xmi:type="umlnotation:UMLConnector" xmi:id="_dEO1gO5XEeitL-zKjjNp2A" element="_dEMZQO5XEeitL-zKjjNp2A" source="_5rHTSe5TEeitL-zKjjNp2A" target="_bd2GgO5XEeitL-zKjjNp2A" fontName="Segoe UI" fontHeight="8" roundedBendpointsRadius="4" routing="Rectilinear" lineColor="8421504" lineWidth="1" showStereotype="Text">
              <children xmi:type="notation:DecorationNode" xmi:id="_dEO1gu5XEeitL-zKjjNp2A" type="TransitionLabelCompartment">
                <children xmi:type="notation:BasicDecorationNode" xmi:id="_dEO1hO5XEeitL-zKjjNp2A" type="Stereotype"/>
                <children xmi:type="notation:BasicDecorationNode" xmi:id="_dEO1he5XEeitL-zKjjNp2A" type="TransitionLabel"/>
                <children xmi:type="notation:ListCompartment" xmi:id="_dEO1hu5XEeitL-zKjjNp2A" type="Triggers"/>
                <layoutConstraint xmi:type="notation:Bounds" xmi:id="_dEO1g-5XEeitL-zKjjNp2A" y="-149"/>
              </children>
              <bendpoints xmi:type="notation:RelativeBendpoints" xmi:id="_dEO1ge5XEeitL-zKjjNp2A" points="[-359, 591, 226, -1907]$[-681, 1969, -96, -529]"/>
              <sourceAnchor xmi:type="notation:IdentityAnchor" xmi:id="_dE0rYO5XEeitL-zKjjNp2A" id="(0.7564526803441429,0.5822159491884262)"/>
            </edges>
          </contents>
        </eAnnotations>
        <region xmi:id="_5rHTd-5TEeitL-zKjjNp2A" name="Region1">
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_5rHTeO5TEeitL-zKjjNp2A"/>
          <subvertex xmi:type="uml:State" xmi:id="_5rHTee5TEeitL-zKjjNp2A" name="WaitForRequest">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5rHTeu5TEeitL-zKjjNp2A" name="Entry">
              <language><![CDATA[C++]]></language>
              <body><![CDATA[external.enable();]]></body>
            </entry>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_bd0RUO5XEeitL-zKjjNp2A" name="Stopped"/>
          <transition xmi:id="_5rHTfO5TEeitL-zKjjNp2A" name="Initial" source="_5rHTeO5TEeitL-zKjjNp2A" target="_5rHTee5TEeitL-zKjjNp2A">
            <eAnnotations xmi:id="_5rHTfe5TEeitL-zKjjNp2A" source="uml2.alias">
              <details xmi:id="_5rHTfu5TEeitL-zKjjNp2A" key="Initial"/>
            </eAnnotations>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5rHTf-5TEeitL-zKjjNp2A" name="Effect">
              <language><![CDATA[C++]]></language>
              <body><![CDATA[// Give the subcapsule a chance to override configuration properties
init();

// Launch server thread
job = new ServerJob(this, config.port, config.logToStdOut, config.maxWaitForReply);
RTThread* serverThread = new RTThread(job, 20000 /* stack size */);

// set-up a server socket

//LocalServerConnection *lsc = new LocalServerConnection(*this);

//cout << "TCP server started" << endl;]]></body>
            </effect>
          </transition>
          <transition xmi:id="_5rHTgO5TEeitL-zKjjNp2A" name="requestReceived" source="_5rHTee5TEeitL-zKjjNp2A" target="_5rHTee5TEeitL-zKjjNp2A">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5rHTge5TEeitL-zKjjNp2A" name="Effect">
              <language><![CDATA[C++]]></language>
              <body><![CDATA[	// Process all available external data
	unsigned int remaining;
	do {
		std::pair<std::string, LocalServerConnection*>* data;
		remaining = external.dataPopFront((void**) &data);
		if (data == 0)
			break;

		std::string& str = data->first;
		if (config.logToStdOut)
			std::cout << "External data: " << str << std::endl;

		if (config.defaultHandlingOfReceivedMessages) {
			// Perform default message handling, assuming JSON encoded messages on RT specific format
			handleReceivedMessageDefault(str, data->second);
		}
		else {
			// Let subclasses implement a custom handling of the received message
			handleReceivedMessageCustom(str, data->second);
		}

		delete data;
	}
	while (remaining > 0);

]]></body>
            </effect>
            <trigger xmi:id="_5rHTgu5TEeitL-zKjjNp2A" name="" port="_5rHTO-5TEeitL-zKjjNp2A">
              <event xmi:type="uml:CallEvent" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/RTClasses.emx#_17fplbIlEduJc5NEaBCMOw?RTClasses/External/event?"/>
            </trigger>
          </transition>
          <transition xmi:id="_dEMZQO5XEeitL-zKjjNp2A" name="stop" source="_5rHTee5TEeitL-zKjjNp2A" target="_bd0RUO5XEeitL-zKjjNp2A">
            <trigger xmi:id="_5ngowO5XEeitL-zKjjNp2A" name="" event="_ZJ5G7e5XEeitL-zKjjNp2A" port="_5rHTPO5TEeitL-zKjjNp2A"/>
          </transition>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_5rH6Qu5TEeitL-zKjjNp2A" name="handleReceivedMessageDefault" specification="_5rH6Ru5TEeitL-zKjjNp2A">
        <language><![CDATA[C++]]></language>
        <body><![CDATA[	
	if(str.empty())
	{
		return;
	}
	// First check for some special HTTP requests
	if (str.rfind("GET /getPorts", 0) == 0) {
		std::string strResult = getPorts();
		conn->replyHTTPStatus(ITCPConnection::Status::OK, strResult);
		return;
	}

	// Everything else is handled as TCP requests
	RTJsonParser parse;
	RTJsonResult jsonResult;
	if(!parse.parseJsonString(jsonResult, str))
	{
		conn->replyHTTPStatus(ITCPConnection::Status::Error, "Failed to parse JSON: " + str);
		return;
	}

	RTJsonResult command = jsonResult["command"];
	if (!command.ok()) {
		conn->replyHTTPStatus(ITCPConnection::Status::Error, "Failed to get 'command' key from JSON: " + str);
		return;
	}
	std::string cmd = jsonResult["command"].get_string();
	if (config.logToStdOut)
		std::cout << "JSON command received: " << cmd << std::endl;

	if (cmd == "sendEvent" || cmd == "invokeEvent") {
		std::string portName =  jsonResult["port"].get_string();

		// Find a matching port in this capule
		const RTActor_class* actorData = getActorData();

		RTProtocol* foundPort = 0;
		const RTPortDescriptor* foundPortDescriptor = 0;
		const RTPortDescriptor* portDescriptor = actorData->ports;
		for (int i = actorData->numPorts; --i >= 0 && !foundPortDescriptor; ++portDescriptor ) {
			RTProtocol* port = RTObjectOf( RTProtocol, portDescriptor->offset, this );
			if (portName == port->getName()) {
				foundPortDescriptor = portDescriptor;
				foundPort = port;
			}
		}

		if (!foundPortDescriptor || !foundPort) {
			conn->replyStatus(ITCPConnection::Status::Error, "Failed to find port: " + portName);
			return;
		}

		const RTProtocolDescriptor* protocolDescriptor = foundPortDescriptor->protocol;
		const RTProtocolDescriptor* protocolDescriptorConjugate = protocolDescriptor->conjugate;

		// Find a matching out event in the port protocol
		std::string eventName =  jsonResult["event"].get_string();

		const RTSignalDescriptor* foundSignalDescriptor = 0;
	    const RTSignalDescriptor* signalDescriptor = protocolDescriptorConjugate->inSignals;
	    for (int sigCount  = protocolDescriptorConjugate->numInSignals; --sigCount >= 0 && !foundSignalDescriptor; ++signalDescriptor ) {
	    	if (eventName == signalDescriptor->name) {
	    		foundSignalDescriptor = signalDescriptor;
	    	}
	    }

	    bool incomingEvent = false;
	    if (!foundSignalDescriptor) {
			// No out event found. Check if the "incomingEvent" flag is set. In that case the event is "incoming" and should be handled by
			// the TCPServer or the capsule that inherits from it, rather than being sent out to another capsule.
	    	std::string incomingEventString =  jsonResult["incomingEvent"].get_string();

			if (!incomingEventString.empty()) {
				// Doesn't matter what this attribute is set to
				incomingEvent = true;
				const RTSignalDescriptor* signalDescriptor = protocolDescriptor->inSignals;
				for (int sigCount = protocolDescriptor->numInSignals; --sigCount >= 0 && !foundSignalDescriptor; ++signalDescriptor) {
					if (eventName == signalDescriptor->name) {
						foundSignalDescriptor = signalDescriptor;
					}
				}
			}
		}
	    
	    if (!foundSignalDescriptor) {
			conn->replyStatus(ITCPConnection::Status::Error, "Failed to find event: " + eventName);
			return;
	    }

	    std::string dataString =  jsonResult["data"].get_string();
	    void* data = 0;
		const RTObject_class* dataType = 0;
	    if (foundSignalDescriptor->type != &RTType_void && !dataString.empty()) {
	    	// The signal expects data and we have data. Decode the data from ASCII format.	    		    		   
	    	RTMemoryInBuffer source (dataString.c_str(), dataString.size());
	    	RTAsciiDecoding decoder(&source);
				    	
			if (decoder.get(&data, &dataType) == 0) {
				conn->replyStatus(ITCPConnection::Status::Error, "Failed to decode data: " + dataString);
				return;
			}
			
			if (dataType == &RTType_RTUnknownObject) {
				conn->replyStatus(ITCPConnection::Status::Error, "Failed to decode data (it has an unknown type): " + dataString);
				return;
			}

			// TODO: Check so that dataType is compatible with foundSignalDescriptor->type

	    	//foundSignalDescriptor->type->decode(data, &decoder);
	    }

	    // Is a port index specified?
	    int portIndex = jsonResult["portIndex"].get_int();
	    
	    if (cmd == "sendEvent") {	    
	    	std::string priorityString =  jsonResult["priority"].get_string();
	    	std::string str_priority = "General";
	    	if (!priorityString.empty())
	    		str_priority = priorityString;
	    			
	    	int priority = General; // Default
	    	if (str_priority == "Panic")
	    		priority = Panic;
	    	else if (str_priority == "High")
	    		priority = High;
	    	else if (str_priority == "Low")
	    		priority = Low;
	    	else if (str_priority == "Background")
	    		priority = Background;
	    	
	    	if (incomingEvent) {
	    		// Special case: Send as an incoming event on a port
	    		RTMessage * msg = context()->newMsg();

				if( msg == (RTMessage *)0 )
				{
					conn->replyStatus(ITCPConnection::Status::Error, "Out of memory when attempting to inject incoming event " + eventName);
					context()->setError(RTController::noMem, RTController::SystemService, (const void *)0, (const void *)0 );
					return;
				}

				msg->setData(data, foundSignalDescriptor->type);
				msg->setSignal(foundSignalDescriptor->value);
				msg->setPriority(priority);
				msg->setDestination(this, foundPort, portIndex > 0 ? portIndex : 0);
				msg->internData();

				context()->receive(msg, context());

	    	}
	    	else {
	    		// Normal case: Send as an outgoing event on a port
				int result = (portIndex == -1) ?
						foundPort->send(foundSignalDescriptor->value, data, foundSignalDescriptor->type, priority) :
						foundPort->sendAt(portIndex, foundSignalDescriptor->value, data, foundSignalDescriptor->type, priority);
				if (result == 0) {
					// Failed to send
					conn->replyStatus(ITCPConnection::Status::Error, context()->strerror());
					return;
				}
	    	}
	    	
			conn->replyStatus(ITCPConnection::Status::OK, "Command sendEvent succeeded!");
	    }
	    else if (cmd == "invokeEvent") {
	    	RTMessage* replies = new RTMessage[foundPort->size()];
	    	int result = (portIndex == -1) ?
					foundPort->invoke(replies, foundSignalDescriptor->value, data, foundSignalDescriptor->type, true /* implicitReply */) :
					foundPort->invokeAt(portIndex, replies, foundSignalDescriptor->value, data, foundSignalDescriptor->type, true /* implicitReply */);
			if (result == 0) {
				// Failed to invoke
				conn->replyStatus(ITCPConnection::Status::Error, context()->strerror());
				delete[] replies;
				return;
			}   
			
			std::string strResult = "[";
			for (int i = 0; i < result /* number of replies */; i++) {
				if (i > 0)
					strResult.append(", ");
				if (!replies[i].isValid()) {
					// Invalid reply.
					strResult.append("{\"isValid\" : false}");
					continue;
				}
				RTDynamicStringOutBuffer buf;				
				strResult.append("{ \"event\" : \"");
				strResult.append(replies[i].getSignalName());
				strResult.append("\" ");
				
				const RTObject_class * replyType = replies[i].getType();
				const void* replyData = replies[i].getData();

				if (replyType != 0) {
					strResult.append(", \"type\" : \"");
					strResult.append(replyType->name());
					strResult.append("\" ");
				}
				if (replyData != 0) {
					RTDynamicStringOutBuffer buf;		
					RTAsciiEncoding coding(&buf);
					coding.put(replyData, replyType);	
					strResult.append(", \"data\" : ");
					std::string data(buf.getString());
					
					strResult.append(stringify(data));
					strResult.append(" ");
				}					
				strResult.append("}");
			}
			strResult.append("]");
			delete[] replies;
			
			conn->replyStatus(ITCPConnection::Status::OK, "Command invokeEvent succeeded!", strResult);
	    }

		if (dataType != 0) {
			// The data was copied when sending or invoking the event, so now we must destroy it
			dataType->destroy(data, RTObject_class::DestroyAndDeallocate);
		}			
	}
	else if (cmd == "getPorts") {
		// Get all ports of this capule		
		std::string strResult = getPorts();
		conn->replyStatus(ITCPConnection::Status::OK, "Command getPorts succeeded!", strResult);
	}
	else {
		// Unknown command
		conn->replyStatus(ITCPConnection::Status::Error, "Unknown command " + cmd);	
	}]]></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_29hpUPF5EeiGPObbQ5S9rA" name="unexpectedMessage" specification="_j8WecPF5EeiGPObbQ5S9rA">
        <language><![CDATA[C++]]></language>
        <body><![CDATA[// Called when an outgoing message arrives at the TCPServer capsule part.
// JSON encode it and send the encoding to the specified remote host.

	if (config.remoteHost.empty() || config.remotePort == 0)
		return; // Sending of outgoing messages is disabled

	const RTMessage *msg = getMsg();

//RTJsonEncoding coding(&buf);
//coding.put_msg(msg);
//string str(buf.getString(), RTMemoryUtil::strlen(buf.getString()) - 1);

	std::string str = "{ \"event\" : \"";
	str.append(msg->getSignalName());
	str.append("\" ");

	const RTObject_class *type = msg->getType();
	const void *data = msg->getData();

	if (type != 0) {
		str.append(", \"type\" : \"");
		str.append(type->name());
		str.append("\" ");
	}
	if (data != 0) {
		RTDynamicStringOutBuffer buf;
		RTAsciiEncoding coding(&buf);
		coding.put(data, type);
		str.append(", \"data\" : ");
		std::string data(buf.getString());
		str.append(stringify(data));
		str.append(" ");
	}

// Make the JSON format identical to 'sendEvent' or 'invokeEvent' objects for incoming events
// so it becomes possible to build a distributed Model RealTime application where one
// executable can consume the output of another executable.
	str.append(", \"command\" : \"");
	if (msg->priority == System) {
		// Invoked event
		str.append("invokeEvent\"");
	} else {
		// Sent event
		std::string priority = "General";
		if (msg->priority == Panic)
			priority = "Panic";
		else if (msg->priority == High)
			priority = "High";
		else if (msg->priority == Low)
			priority = "Low";
		else if (msg->priority == Background)
			priority = "Background";

		str.append("sendEvent\", \"priority\" : \"");
		str.append(priority);
		str.append("\"");
	}

// Append port and portIndex
	RTProtocol *port = msg->sap();
	if (port != 0 && port->getName() != 0) {
		str.append(", \"port\" : \"");
		str.append(port->getName());
		str.append("\", \"portIndex\" : ");
		str.append(std::to_string(msg->sapIndex0()));
	}
	str.append("}");

	if (config.logToStdOut)
		std::cout << "Out message: " << str << std::endl;

	bool writeSuccess = false;

	RTTcpSocket tcp;
	RTIOMonitor *ioM = new RTIOMonitor();
	tcp.registerWith(ioM);
	if (!tcp.create()) {
		std::cerr << "TCP socket creation is failed." << std::endl;
		tcp.close();
		delete ioM;
		return;
	}
	if (!tcp.connect(static_cast<const char*>(config.remoteHost.c_str()),
			static_cast<int>(config.remotePort))) {
		std::cerr << "Unable to connect to " << config.remoteHost << " on port "
				<< config.remotePort << std::endl;
		return;
	}
	if (tcp.write(static_cast<const char*>(str.c_str()),
			static_cast<int>(str.length())) < 0) {
		std::cerr << "Error: Failed to write to socket for "
				<< config.remoteHost << " on port " << config.remotePort
				<< std::endl;
		return;
	}
	writeSuccess = true;

	static const RTTimespec awhile(1L, 0L);
	while (!ioM->wait(&awhile)) {
		std::this_thread::sleep_for(std::chrono::seconds(1));
		std::cout << "Waiting for out message... " << std::endl;
	}

	// Read response, if any
	char buffer[1024];
	int n;
	std::string received;
	do {
		RTMemoryUtil::memset(buffer, 0, sizeof(buffer));
		n = tcp.read(buffer, 1024);
		if (n > 0)
			received.append(buffer, n);
	} while (n > 0);

	tcp.close();
	delete ioM;

	if (config.logToStdOut)
		std::cout << "Response for out message: " << received << std::endl;
	handleResponseForOutMessage(received);

	// We failed to read a response, which typically just means the other end didn't give any. So this is not to be treated as an error.]]></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_mO8X4PGUEeiGPObbQ5S9rA" name="init" specification="_dbgzYPGUEeiGPObbQ5S9rA">
        <language><![CDATA[C++]]></language>
        <body><![CDATA[// Override to set custom values of configuration properties ]]></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_YPc3cHxrEemQvv1wPLSA6g" name="handleResponseForOutMessage" specification="_YPbpUHxrEemQvv1wPLSA6g">
        <language><![CDATA[C++]]></language>
        <body><![CDATA[	if(response.empty()) {
		return;
	}

	RTJsonParser parse;
	RTJsonResult jsonResult;
	if(!parse.parseJsonString(jsonResult, response))
	{
		return;
	}

	std::string cmd = jsonResult["command"].get_string();
	if (cmd.empty())
		return; // No command provided - skip it

	if (config.logToStdOut)
		std::cout << "Response contained JSON command: " << cmd << std::endl;

	if (cmd == "reply") {
		std::string portName =  jsonResult["port"].get_string();
		// Find a matching port in this capule
		const RTActor_class* actorData = getActorData();

		RTProtocol* foundPort = 0;
		const RTPortDescriptor* foundPortDescriptor = 0;
		const RTPortDescriptor* portDescriptor = actorData->ports;
		for (int i = actorData->numPorts; --i >= 0 && !foundPortDescriptor; ++portDescriptor ) {
			RTProtocol* port = RTObjectOf( RTProtocol, portDescriptor->offset, this );
			if (portName == port->getName()) {
				foundPortDescriptor = portDescriptor;
				foundPort = port;
			}
		}

		if (!foundPortDescriptor || !foundPort) {
			std::cerr << "ERROR: Failed to find port: " << portName << std::endl;
			return;
		}

		const RTProtocolDescriptor* protocolDescriptor = foundPortDescriptor->protocol;
		const RTProtocolDescriptor* protocolDescriptorConjugate = protocolDescriptor->conjugate;

		// Find a matching out event in the port protocol
		std::string eventName =  jsonResult["event"].get_string();
		std::cout <<"rajnesh handleResponseForOutMessage eventName->" << eventName << std::endl;
		const RTSignalDescriptor* foundSignalDescriptor = 0;
	    const RTSignalDescriptor* signalDescriptor = protocolDescriptorConjugate->inSignals;
	    for (int sigCount  = protocolDescriptorConjugate->numInSignals; --sigCount >= 0 && !foundSignalDescriptor; ++signalDescriptor ) {
	    	if (eventName == signalDescriptor->name) {
	    		foundSignalDescriptor = signalDescriptor;
	    	}
	    }

	    if (!foundSignalDescriptor) {
	    	std::cerr << "ERROR: Failed to find event: " << eventName << std::endl;
			return;
	    }

	    std::string dataString =  jsonResult["data"].get_string();
	    void* data = 0;
		const RTObject_class* dataType = 0;
	    if (foundSignalDescriptor->type != &RTType_void && !dataString.empty()) {
	    	// The signal expects data and we have data. Decode the data from ASCII format.	    		    		   
			std::cout <<"rajnesh handleResponseForOutMessage dataString->" << dataString << std::endl;
	    	RTMemoryInBuffer source (dataString.c_str(), dataString.size());
	    	RTAsciiDecoding decoder(&source);
			
	    	/*
	    	Var var_type = object->get("type");
			if (var_type.isEmpty()) {
				conn->replyStatus(ITCPConnection::Status::Error, "Type of event data must be specified.");
				return;
			}					
	    	
	    	RTJsonDecoding decoder(dataString, var_type.convert<string>());
	    	*/
			if (decoder.get(&data, &dataType) == 0) {
				std::cerr << "ERROR: Failed to decode data: " << dataString << std::endl;
				return;
			}
			
			if (dataType == &RTType_RTUnknownObject) {
				std::cerr << "ERROR: Failed to decode data (it has an unknown type): " << dataString << std::endl;
				return;
			}

			// TODO: Check so that dataType is compatible with foundSignalDescriptor->type

	    	//foundSignalDescriptor->type->decode(data, &decoder);
	    }
	    
	    // We are now ready to perform the reply
	    int result = foundPort->reply(foundSignalDescriptor->value, data, foundSignalDescriptor->type);		
		if (result == 0) {
			// Failed to reply
			std::cerr << "ERROR: " << context()->strerror() << std::endl;
			return;
		}   
		
		if (dataType != 0) {
			// The data was copied when replying the event, so now we must destroy it
			dataType->destroy(data, RTObject_class::DestroyAndDeallocate);
		}			
	}	
	else {
		// Unknown command
		std::cerr << "ERROR: Unknown command: " << cmd << std::endl;
	}
	]]></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CDT-MLqtEem5vPW57wwiFQ" name="getPorts" specification="_rvlgsLnsEem5vPW57wwiFQ">
        <language><![CDATA[C++]]></language>
        <body><![CDATA[		const RTActor_class* actorData = getActorData();

		const RTPortDescriptor* portDescriptor = actorData->ports;
		std::string strResult = "[";
		bool firstPort = true;
		for (int i = actorData->numPorts; --i >= 0; ++portDescriptor ) {
			RTProtocol* port = RTObjectOf( RTProtocol, portDescriptor->offset, this );
			if (port->getName() == "external" && port->getInfo()->protocol->name == "External")
				continue; // Skip the 'external' port of the TCPServer capsule since it's only for internal use

			if (!firstPort)
				strResult.append(", ");
			firstPort = false;

			strResult.append("{ \"name\" : \"");
			strResult.append(port->getName());
			strResult.append("\", \"events\" : [");

			// Get all out events of the port's protocol
			const RTProtocolDescriptor* protocolDescriptor = portDescriptor->protocol;
			const RTProtocolDescriptor* protocolDescriptorConjugate = protocolDescriptor->conjugate;

			const RTSignalDescriptor* signalDescriptor = protocolDescriptorConjugate->inSignals;
			bool firstEvent = true;
			for (int sigCount = protocolDescriptorConjugate->numInSignals; --sigCount >= 0; ++signalDescriptor ) {
				if (!signalDescriptor->type)
					continue; // Skip TargetRTS internal events such as rtBound and rtUnbound

				if (!firstEvent)
					strResult.append(", ");
				firstEvent = false;

				strResult.append("\"");
				strResult.append(signalDescriptor->name);
				strResult.append("\"");
			}

			strResult.append("] }");

		}
		strResult.append("]");
		return strResult;
	]]></body>
      </ownedBehavior>
      <ownedOperation xmi:id="_5rH6Q-5TEeitL-zKjjNp2A" name="onRequestReceived">
        <ownedParameter xmi:id="_5rH6RO5TEeitL-zKjjNp2A" name="return" direction="return">
          <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_f0877hKyEdyaM9S2zG4bgA?CppPrimitiveDatatypes/void?"/>
        </ownedParameter>
        <ownedParameter xmi:id="_5rH6Re5TEeitL-zKjjNp2A" name="str"/>
      </ownedOperation>
      <ownedOperation xmi:id="_5rH6Ru5TEeitL-zKjjNp2A" name="handleReceivedMessageDefault" visibility="private" method="_5rH6Qu5TEeitL-zKjjNp2A">
        <ownedParameter xmi:id="_5rH6R-5TEeitL-zKjjNp2A" name="str"/>
        <ownedParameter xmi:id="_5rH6SO5TEeitL-zKjjNp2A" name="conn" type="_Vq7iIO5WEeitL-zKjjNp2A"/>
        <ownedParameter xmi:id="_8QsRgO5XEeitL-zKjjNp2A" name="return" direction="return">
          <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_f0877hKyEdyaM9S2zG4bgA?CppPrimitiveDatatypes/void?"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_5rH6Se5TEeitL-zKjjNp2A" name="handleReceivedMessageCustom" visibility="protected">
        <ownedParameter xmi:id="_5rH6Su5TEeitL-zKjjNp2A" name="str"/>
        <ownedParameter xmi:id="_5rH6S-5TEeitL-zKjjNp2A" name="conn" type="_Vq7iIO5WEeitL-zKjjNp2A"/>
        <ownedParameter xmi:id="_7tKtsO5XEeitL-zKjjNp2A" name="return" direction="return">
          <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_f0877hKyEdyaM9S2zG4bgA?CppPrimitiveDatatypes/void?"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_j8WecPF5EeiGPObbQ5S9rA" name="unexpectedMessage" method="_29hpUPF5EeiGPObbQ5S9rA">
        <ownedParameter xmi:id="_8U5WYPIYEeiGPObbQ5S9rA" name="return" direction="return">
          <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_f0877hKyEdyaM9S2zG4bgA?CppPrimitiveDatatypes/void?"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_dbgzYPGUEeiGPObbQ5S9rA" name="init" method="_mO8X4PGUEeiGPObbQ5S9rA">
        <ownedParameter xmi:id="_-HlcAPIYEeiGPObbQ5S9rA" name="return" direction="return">
          <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_f0877hKyEdyaM9S2zG4bgA?CppPrimitiveDatatypes/void?"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_YPbpUHxrEemQvv1wPLSA6g" name="handleResponseForOutMessage" visibility="private" method="_YPc3cHxrEemQvv1wPLSA6g">
        <ownedParameter xmi:id="_YPbpUXxrEemQvv1wPLSA6g" name="response"/>
        <ownedParameter xmi:id="_YPbpU3xrEemQvv1wPLSA6g" name="return" direction="return">
          <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_f0877hKyEdyaM9S2zG4bgA?CppPrimitiveDatatypes/void?"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_rvlgsLnsEem5vPW57wwiFQ" name="getPorts" method="_CDT-MLqtEem5vPW57wwiFQ">
        <ownedParameter xmi:id="_ETGPgLqtEem5vPW57wwiFQ" name="return" direction="return"/>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_5rKWgO5TEeitL-zKjjNp2A" name="TCPServer_Config">
      <ownedAttribute xmi:id="_5rKWhe5TEeitL-zKjjNp2A" name="port" visibility="public" isStatic="true">
        <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_b5qeIMuSEdy4n9Rh8xcU5g?CppPrimitiveDatatypes/unsigned%20int?"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_5rKWhu5TEeitL-zKjjNp2A" value="9911">
          <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_b5qeIMuSEdy4n9Rh8xcU5g?CppPrimitiveDatatypes/unsigned%20int?"/>
        </defaultValue>
      </ownedAttribute>
      <ownedAttribute xmi:id="_5rKWh-5TEeitL-zKjjNp2A" name="defaultHandlingOfReceivedMessages" visibility="public" isStatic="true">
        <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_f0875RKyEdyaM9S2zG4bgA?CppPrimitiveDatatypes/bool?"/>
        <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_5rKWiO5TEeitL-zKjjNp2A" value="true">
          <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_f0875RKyEdyaM9S2zG4bgA?CppPrimitiveDatatypes/bool?"/>
        </defaultValue>
      </ownedAttribute>
      <ownedAttribute xmi:id="_G4md0O54EeitL-zKjjNp2A" name="maxWaitForReply" visibility="public" isStatic="true">
        <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_b5qeIMuSEdy4n9Rh8xcU5g?CppPrimitiveDatatypes/unsigned%20int?"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_KxOVMO54EeitL-zKjjNp2A" value="5000">
          <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_b5qeIMuSEdy4n9Rh8xcU5g?CppPrimitiveDatatypes/unsigned%20int?"/>
        </defaultValue>
      </ownedAttribute>
      <ownedAttribute xmi:id="_Nfwa8PGMEeiGPObbQ5S9rA" name="remotePort" visibility="public" isStatic="true">
        <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_b5qeIMuSEdy4n9Rh8xcU5g?CppPrimitiveDatatypes/unsigned%20int?"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_Nfwa8fGMEeiGPObbQ5S9rA" value="2234">
          <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_b5qeIMuSEdy4n9Rh8xcU5g?CppPrimitiveDatatypes/unsigned%20int?"/>
        </defaultValue>
      </ownedAttribute>
      <ownedAttribute xmi:id="_btFcUPGMEeiGPObbQ5S9rA" name="remoteHost" visibility="public" isStatic="true">
        <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_nQigwPOiEeiMwvLnGvgCsg" name="">
          <language><![CDATA[C++]]></language>
          <body><![CDATA["127.0.0.1"]]></body>
        </defaultValue>
      </ownedAttribute>
      <ownedAttribute xmi:id="_B1wdwM8OEemd-cvOi0spQQ" name="logToStdOut" visibility="public" isStatic="true">
        <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_f0875RKyEdyaM9S2zG4bgA?CppPrimitiveDatatypes/bool?"/>
        <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_B1wdwc8OEemd-cvOi0spQQ" value="true">
          <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_f0875RKyEdyaM9S2zG4bgA?CppPrimitiveDatatypes/bool?"/>
        </defaultValue>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_5rLkoO5TEeitL-zKjjNp2A" memberEnd="_5rHTN-5TEeitL-zKjjNp2A _5rLkoe5TEeitL-zKjjNp2A">
      <ownedEnd xmi:id="_5rLkoe5TEeitL-zKjjNp2A" name="" visibility="private" type="_5rHTMO5TEeitL-zKjjNp2A" association="_5rLkoO5TEeitL-zKjjNp2A">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_5rLkou5TEeitL-zKjjNp2A" value="1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_5rLko-5TEeitL-zKjjNp2A" value="1"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="_Vq7iIO5WEeitL-zKjjNp2A" name="ITCPConnection">
      <ownedOperation xmi:id="_Vq7iIe5WEeitL-zKjjNp2A" name="reply">
        <ownedParameter xmi:id="_Vq7iIu5WEeitL-zKjjNp2A" name="msg"/>
        <ownedParameter xmi:id="_Bc4CgO5YEeitL-zKjjNp2A" name="return" direction="return">
          <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_f0877hKyEdyaM9S2zG4bgA?CppPrimitiveDatatypes/void?"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_UPAbEO50EeitL-zKjjNp2A" name="replyStatus">
        <ownedParameter xmi:id="_eGuuIO50EeitL-zKjjNp2A" name="status" type="_aqjiMO50EeitL-zKjjNp2A"/>
        <ownedParameter xmi:id="_UPAbEe50EeitL-zKjjNp2A" name="msg"/>
        <ownedParameter xmi:id="_9Yy44PFTEeiGPObbQ5S9rA" name="result"/>
        <ownedParameter xmi:id="_UPAbEu50EeitL-zKjjNp2A" name="return" direction="return">
          <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_f0877hKyEdyaM9S2zG4bgA?CppPrimitiveDatatypes/void?"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_sj470PFUEeiGPObbQ5S9rA" name="replyStatus">
        <ownedParameter xmi:id="_sj470fFUEeiGPObbQ5S9rA" name="status" type="_aqjiMO50EeitL-zKjjNp2A"/>
        <ownedParameter xmi:id="_sj470vFUEeiGPObbQ5S9rA" name="msg"/>
        <ownedParameter xmi:id="_sj471PFUEeiGPObbQ5S9rA" name="return" direction="return">
          <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_f0877hKyEdyaM9S2zG4bgA?CppPrimitiveDatatypes/void?"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_8MtMsMr-Eemd-cvOi0spQQ" name="replyHTTPStatus">
        <ownedParameter xmi:id="_8MtMscr-Eemd-cvOi0spQQ" name="status" type="_aqjiMO50EeitL-zKjjNp2A"/>
        <ownedParameter xmi:id="_8MtMssr-Eemd-cvOi0spQQ" name="msg"/>
        <ownedParameter xmi:id="_8MtMs8r-Eemd-cvOi0spQQ" name="return" direction="return">
          <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_f0877hKyEdyaM9S2zG4bgA?CppPrimitiveDatatypes/void?"/>
        </ownedParameter>
      </ownedOperation>
      <nestedClassifier xmi:type="uml:Enumeration" xmi:id="_aqjiMO50EeitL-zKjjNp2A" name="Status">
        <ownedLiteral xmi:id="_gPffgO52EeitL-zKjjNp2A" name="OK" classifier="_aqjiMO50EeitL-zKjjNp2A"/>
        <ownedLiteral xmi:id="_cUJ9QO50EeitL-zKjjNp2A" name="Error" classifier="_aqjiMO50EeitL-zKjjNp2A"/>
      </nestedClassifier>
    </packagedElement>
    <packagedElement xmi:type="uml:Dependency" xmi:id="_RtbVUO5XEeitL-zKjjNp2A" name="" supplier="_Vq7iIO5WEeitL-zKjjNp2A" client="_5rHTMO5TEeitL-zKjjNp2A"/>
    <packagedElement xmi:type="uml:Package" xmi:id="_ZJ5G4O5XEeitL-zKjjNp2A" name="TCPServerControl">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_ZJ5G4e5XEeitL-zKjjNp2A" name="TCPServerControl" clientDependency="_ZJ5G4u5XEeitL-zKjjNp2A _ZJ5G6-5XEeitL-zKjjNp2A">
        <interfaceRealization xmi:id="_ZJ5G4u5XEeitL-zKjjNp2A" name="" supplier="_ZJ5G4-5XEeitL-zKjjNp2A" client="_ZJ5G4e5XEeitL-zKjjNp2A" contract="_ZJ5G4-5XEeitL-zKjjNp2A"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_ZJ5G4-5XEeitL-zKjjNp2A" name="TCPServerControl">
        <eAnnotations xmi:id="_ZJ5G5O5XEeitL-zKjjNp2A" source="http://www.eclipse.org/uml2/2.0.0/UML">
          <details xmi:id="_ZJ5G5e5XEeitL-zKjjNp2A" key="ProtocolRole"/>
        </eAnnotations>
        <ownedOperation xmi:id="_ZJ5G5u5XEeitL-zKjjNp2A" name="stop"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_ZJ5G6O5XEeitL-zKjjNp2A" name="TCPServerControl~">
        <eAnnotations xmi:id="_ZJ5G6e5XEeitL-zKjjNp2A" source="http://www.eclipse.org/uml2/2.0.0/UML">
          <details xmi:id="_ZJ5G6u5XEeitL-zKjjNp2A" key="ProtocolRole"/>
        </eAnnotations>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_ZJ5G6-5XEeitL-zKjjNp2A" supplier="_ZJ5G6O5XEeitL-zKjjNp2A" client="_ZJ5G4e5XEeitL-zKjjNp2A"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_ZJ5G7O5XEeitL-zKjjNp2A" name="*"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_ZJ5G7e5XEeitL-zKjjNp2A" operation="_ZJ5G5u5XEeitL-zKjjNp2A">
        <name xsi:nil="true"/>
      </packagedElement>
    </packagedElement>
    <profileApplication xmi:id="_n2Oxzu5SEeitL-zKjjNp2A">
      <eAnnotations xmi:id="_n2Oxz-5SEeitL-zKjjNp2A" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="pathmap://UML_PROFILES/Standard.profile.uml#_yzU58YinEdqtvbnfB2L_5w"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_PROFILES/Standard.profile.uml#_0"/>
    </profileApplication>
    <profileApplication xmi:id="_n2Ox0O5SEeitL-zKjjNp2A">
      <eAnnotations xmi:id="_n2Ox0e5SEeitL-zKjjNp2A" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="pathmap://UML2_MSL_PROFILES/Default.epx#_fNwoAAqoEd6-N_NOT9vsCA?Default/Default?"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML2_MSL_PROFILES/Default.epx#_a_S3wNWLEdiy4IqP8whjFA?Default?"/>
    </profileApplication>
    <profileApplication xmi:id="_n2Ox0u5SEeitL-zKjjNp2A">
      <eAnnotations xmi:id="_n2Ox0-5SEeitL-zKjjNp2A" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="pathmap://UML2_MSL_PROFILES/Deployment.epx#_4OVBUD0TEeKt-L0gyEptgQ?Deployment/Deployment?"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML2_MSL_PROFILES/Deployment.epx#_vjbuwOvHEdiDX5bji0iVSA?Deployment?"/>
    </profileApplication>
    <profileApplication xmi:id="_n2Ox1O5SEeitL-zKjjNp2A">
      <eAnnotations xmi:id="_n2Ox1e5SEeitL-zKjjNp2A" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="pathmap://CPP_LANGUAGE_PROFILE/CppPropertySets.epx#_5TYAwMk4EeO2m9WtkWjeeQ?CppPropertySets/CppPropertySets?"/>
      </eAnnotations>
      <appliedProfile href="pathmap://CPP_LANGUAGE_PROFILE/CppPropertySets.epx#_TNvRgL3gEduxAOGdMW1qJA?CppPropertySets?"/>
    </profileApplication>
    <profileApplication xmi:id="_n2PY0e5SEeitL-zKjjNp2A">
      <eAnnotations xmi:id="_n2P_4O5SEeitL-zKjjNp2A" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="pathmap://RT_PROPERTIES/UMLRealTime.epx#_3TUzoXq6Ed2hSeAAWZznoA?UMLRealTime/UMLRealTime?"/>
      </eAnnotations>
      <appliedProfile href="pathmap://RT_PROPERTIES/UMLRealTime.epx#_uTDwIRHVEdu19OChlR9tHg?UMLRealTime?"/>
    </profileApplication>
    <profileApplication xmi:id="_n2Qm8O5SEeitL-zKjjNp2A">
      <eAnnotations xmi:id="_n2Qm8e5SEeitL-zKjjNp2A" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="pathmap://RT_PROPERTIES/InteractionProfile.epx#_dDVwwX8wEd2ags_Lr77Vow?InteractionProfile/InteractionProfile?"/>
      </eAnnotations>
      <appliedProfile href="pathmap://RT_PROPERTIES/InteractionProfile.epx#_LyeQ4HnVEd2No7ra0rEeOg?InteractionProfile?"/>
    </profileApplication>
  </uml:Package>
  <Default:DefaultLanguage xmi:id="_n2PY0O5SEeitL-zKjjNp2A" base_Package="_n2OxwO5SEeitL-zKjjNp2A" defaultLanguage="C++"/>
  <UMLRealTime:Capsule xmi:id="_5rMywO5TEeitL-zKjjNp2A" base_Class="_5rHTMO5TEeitL-zKjjNp2A"/>
  <CppPropertySets:GeneralCapsuleProperties xmi:id="_5rMywe5TEeitL-zKjjNp2A" base_Class="_5rHTMO5TEeitL-zKjjNp2A">
    <headerPreface xmi:id="_5rMywu5TEeitL-zKjjNp2A">
      <body><![CDATA[#include <string>
#include "../src/include/RTIOMonitor.h"
#include <RTTcpSocket.h>
class RTIOMonitor;]]></body>
    </headerPreface>
    <implementationPreface xmi:id="_5rMyw-5TEeitL-zKjjNp2A">
      <body><![CDATA[
#include <iostream>
#include <sstream>
#include <chrono>
#include <thread>
//#include <mutex>
#include <atomic>
//#include <condition_variable>
#include <list>
#include <RTUnknownObject.h>
#include <RTDynamicStringOutBuffer.h>
#include <RTJsonResult.h>
#include <RTJsonParser.h>
#include <RTJsonEncoding.h>

// Enclose string in double quotes, and escape with backslash any double quote it already contains
std::string& stringify(std::string& s) {
	const std::string quote = "\"";
	const std::string escaped = "\\\"";
	for(size_t pos = 0; (pos = s.find(quote, pos)) != std::string::npos; pos += escaped.size())
		s.replace(pos, quote.size(), escaped);
	
	s.insert(0, quote);
	s.insert(s.size(), quote);
	return s;
}

static const std::string NL = "\n";

class LocalServerConnection : public ITCPConnection {
	TCPServer_Actor& server;
	RTTcpSocket& listenSock;
	RTTcpSocket clientSock;
	RTIOMonitor *ioMonitorClient;
	bool logToStdOut;
	std::atomic_bool hasReplied;
	//std::mutex hasRepliedMutex;
	
	friend class ServerJob;
	
public:	
	LocalServerConnection(TCPServer_Actor& srv, RTTcpSocket& sock, bool log)
			:server(srv), listenSock(sock), logToStdOut(log), hasReplied(false) {
		ioMonitorClient = new RTIOMonitor;
		clientSock.registerWith(ioMonitorClient);			
	}
	
	~LocalServerConnection() {
		clientSock.close();
		delete ioMonitorClient;
	}
	
	bool init() {
		if (!clientSock.acceptFrom(listenSock)) {
			std::cerr << "Connection failed to accept socket" << std::endl;			
			return false;
		}
		
		if (logToStdOut)
			std::cout << "TCP request received: ";

		// TODO: Use another thread from here...
		
		// Wait for data to be available on the socket
		static const RTTimespec awhile(5L, 0L);
		while (!ioMonitorClient->wait(&awhile)) {
			std::cout << "No data available within 5 s. " << std::endl;
			return false;
		}

		// Read request from socket
		char buffer[1024];
		int n;
		std::string received;
		do {
			RTMemoryUtil::memset(buffer, 0, sizeof(buffer));
			n = clientSock.read(buffer, 1024);
			if (n > 0)
				received.append(buffer, n);
		} while (n > 0);

		if (logToStdOut)
			std::cout << received << std::endl;

		if (received.empty()) {
			reply(""); // Empty request - empty response
			return true;
		}

		std::pair<std::string, LocalServerConnection*> *data = new std::pair<std::string, LocalServerConnection*>(received, this);
		server.external.dataPushBack(data);

		if (server.external.raise() == 0) {
			// The capsule is not ready to receive the external event. Wait a little and try 2 more times before giving up.
			std::this_thread::sleep_for(std::chrono::milliseconds(500));
			if (server.external.raise() == 0) {
				std::this_thread::sleep_for(std::chrono::milliseconds(500));
				if (server.external.raise() == 0) {
					replyStatus(Status::Error,
							"Failed to notify TCPServer capsule about received message after 3 attempts. Message is lost!");
					// Need to remove the data object since this LocalServerConnection soon will become invalid						
					server.external.dataDelete(data);

					return false;
				}
			}
		}
		
		return true; // success
	}		
	
	void createStatusJSONMsg(Status status, const std::string& msg, const std::string& result, std::string& str) {
		std::string s = "ok";
		if (status == Status::Error) {
			s = "error";
			std::cout << s << ": " << msg << std::endl;
		}

		str = "{\"status\":\"" + s + "\", \"msg\":\"" + msg + "\"";
		if (!result.empty()) {
			str.append(", \"result\": ");
			str.append(result);
		}
		str.append("}");		
	}

	virtual void reply(const std::string& msg) {
		if (hasReplied) {
			std::cout << "Warning: Multiple reply detected for request. Message: " << msg << std::endl;
			return;
		}
		
		// Send the reply
		clientSock.write(msg.c_str(), msg.length());
		clientSock.write(NL.c_str(), NL.length());
		
		hasReplied = true;
	}	

	virtual void replyStatus(Status status, const std::string& msg, const std::string& result) {
		std::string str;
		createStatusJSONMsg(status, msg, result, str);
		reply(str);
	}

	virtual void replyStatus(Status status, const std::string& msg) {
		replyStatus(status, msg, "");
	}

	virtual void replyHTTPStatus(Status status, const std::string& result) {
		std::string str = "HTTP/1.1 200 OK\n";
		str.append("Content-Type: application/json\n");
		str.append("Access-Control-Allow-Origin: *\n");
		str.append("Content-Length: " + std::to_string(result.size()));
		str.append("\n\n");		
		str.append(result);
		reply(str);
	}
};

// Intercept incoming TCP requests and give them to the TCPServer for processing
class ServerJob : public RTJob {
	TCPServer_Actor* server;
	unsigned int port;
	long maxWaitForReply;
	bool logToStdOut;
	std::list<LocalServerConnection*> connections;

public:
	ServerJob(TCPServer_Actor* s, unsigned int p, bool log, long maxWait) :
		server(s), port(p), logToStdOut(log), maxWaitForReply(maxWait) {}

	virtual const char* name( void ) const override {
		return "TCP Server Job";
	}

	virtual void mainLoop( void ) override {
		RTIOMonitor* ioMonitor = new RTIOMonitor;
		RTTcpSocket listenSock;
		listenSock.registerWith(ioMonitor);
		listenSock.setMaxPendingConnections(100);
		if (!listenSock.create() || !listenSock.listen(port))
		{
			std::cerr << "Failed to create TCP accept socket" << std::endl;
			listenSock.close();
			delete ioMonitor;
			return;
		}

		while (true) {
			static const RTTimespec awhile(5L /* s */, 0L/*maxWaitForReply*1000*1000*/ /* ns */);

			if (ioMonitor->wait(&awhile)) {
				// Incoming connection
				LocalServerConnection* lsc = new LocalServerConnection(*server, listenSock, logToStdOut);

				if (!lsc->init()) {
					delete lsc;
					continue;
				}

				connections.push_back(lsc);
			}
			else {
				// Ongoing connections should all have been replied to by now
				while (!connections.empty()) {
					LocalServerConnection* lsc = connections.front();
					if (lsc->hasReplied) {
						std::cout << "Reply detected. Removing LocalServerConnection" << std::endl;
					}
					else {
						std::ostringstream s;
						s << "No response from RT application within " << maxWaitForReply << " ms";
						lsc->replyStatus(ITCPConnection::Status::Error, s.str(), "");
					}
					connections.pop_front();
					delete lsc;
				}
			}
		}

	}

	virtual void kill( void ) override {

	}
};

/*

// Represents an active connection to the local TCP server
class LocalServerConnection : public ITCPConnection
{
	TCPServer_Actor& capsuleInst;
	const std::string NL = "\n";
	std::string sendReply;
	std::thread threadObj;
	RTTcpSocket listenSock;
	RTIOMonitor * ioMonitor;
	std::condition_variable cv;
	bool hasReplied;
public:
	LocalServerConnection(TCPServer_Actor& context)
		:capsuleInst(context),
		hasReplied(false)
	{
		sendReply.clear();
		ioMonitor = new RTIOMonitor;
		listenSock.registerWith(ioMonitor);
		if (listenSock.create() && listenSock.listen(capsuleInst.config.port))
		{
			threadObj = std::thread(&LocalServerConnection::runThread, this);
		}
		else
		{
			listenSock.close();
			delete ioMonitor;
		}
	}

	void runThread()
	{
		while (1) {
			RTTcpSocket clientSock;
			RTIOMonitor *ioMonitorClient = new RTIOMonitor;
			clientSock.registerWith(ioMonitorClient);

			static const RTTimespec awhile(5L, 0L);

			while (!ioMonitor->wait(&awhile)) {
				std::this_thread::sleep_for(std::chrono::seconds(1));
			}

			if (!clientSock.acceptFrom(listenSock)) {
				std::cerr << "TCP accept socket is failed " << std::endl;
				clientSock.close();
				delete ioMonitorClient;
				return;
			}

			if (capsuleInst.config.logToStdOut)
				std::cout << "TCP request received " << std::endl;

			while (!ioMonitorClient->wait(&awhile)) {
				std::this_thread::sleep_for(std::chrono::seconds(1));
			}
			char buffer[1024];
			int n;
			std::string received;
			do {
				RTMemoryUtil::memset(buffer, 0, sizeof(buffer));
				n = clientSock.read(buffer, 1024);
				if (n > 0)
					received.append(buffer, n);
			} while (n > 0);

			std::pair<std::string, LocalServerConnection*> *data =
					new std::pair<std::string, LocalServerConnection*>(received,
							this);
			capsuleInst.external.dataPushBack(data);

			if (capsuleInst.external.raise() == 0) {
				// The capsule is not ready to receive the external event. Wait a little and try 2 more times before giving up.
				std::this_thread::sleep_for(std::chrono::milliseconds(500));
				if (capsuleInst.external.raise() == 0) {
					std::this_thread::sleep_for(std::chrono::milliseconds(500));
					if (capsuleInst.external.raise() == 0) {
						replyStatus(Status::Error,
								"Failed to notify TCPServer capsule about received message after 3 attempts. Message is lost!");
						// Need to remove the data object since this LocalServerConnection soon will become invalid						
						capsuleInst.external.dataDelete(data);

						clientSock.close();
						delete ioMonitorClient;

						return;
					}
				}
			}

#ifdef _DEBUG
			long sleepDuration = 1000000;
#else
			long sleepDuration = capsuleInst.config.maxWaitForReply;
#endif
			// Keep the server connection open until a reply is received (or a timeout occurs).
			std::mutex m;
			std::unique_lock<std::mutex> ulck(m);
			if (cv.wait_for(ulck, std::chrono::milliseconds(sleepDuration)) == std::cv_status::timeout) {
				std::ostringstream s;
				s << "No response from RT application within " << sleepDuration << " ms";
								
				createStatusJSONMsg(Status::Error, s.str(), "", sendReply);				
			}

			if (!sendReply.empty()) {
				clientSock.write(sendReply.c_str(), sendReply.length());
				clientSock.write(NL.c_str(), NL.length());
				sendReply.clear();				
			}
			hasReplied = false;
			clientSock.close();
			delete ioMonitorClient;
		}
	}

	void createStatusJSONMsg(Status status, const std::string& msg, const std::string& result, std::string& str) {
		std::string s = "ok";
		if (status == Status::Error) {
			s = "error";
			std::cout << s << ": " << msg << std::endl;
		}

		str = "{\"status\":\"" + s + "\", \"msg\":\"" + msg + "\"";
		if (!result.empty()) {
			str.append(", \"result\": ");
			str.append(result);
		}
		str.append("}");		
	}
	
	virtual void reply(const std::string& msg) {
		if (hasReplied) {
			std::cout << "Warning: Multiple reply detected for request. Message: " << msg << std::endl;
			return;
		}
		sendReply = msg;
		cv.notify_one();
		hasReplied = true;
	}	

	virtual void replyStatus(Status status, const std::string& msg, const std::string& result) {
		std::string str;
		createStatusJSONMsg(status, msg, result, str);
		reply(str);
	}

	virtual void replyStatus(Status status, const std::string& msg) {
		replyStatus(status, msg, "");
	}

	virtual void replyHTTPStatus(Status status, const std::string& result) {
		std::string str = "HTTP/1.1 200 OK\n";
		str.append("Content-Type: application/json\n");
		str.append("Access-Control-Allow-Origin: *\n");
		str.append("Content-Length: " + std::to_string(result.size()));
		str.append("\n\n");		
		str.append(result);
		reply(str);
	}

};
*/]]></body>
    </implementationPreface>
    <publicDeclarations xmi:id="_5rMyxO5TEeitL-zKjjNp2A">
      <body><![CDATA[friend class LocalServerConnection;
friend class ServerJob;]]></body>
    </publicDeclarations>
  </CppPropertySets:GeneralCapsuleProperties>
  <UMLRealTime:RTPort xmi:id="_5rNZ0e5TEeitL-zKjjNp2A" isWired="false" base_Port="_5rHTO-5TEeitL-zKjjNp2A"/>
  <UMLRealTime:RTPort xmi:id="_5rNZ0u5TEeitL-zKjjNp2A" base_Port="_5rHTPO5TEeitL-zKjjNp2A"/>
  <CppPropertySets:GeneralOperationProperties xmi:id="_5rNZ0-5TEeitL-zKjjNp2A" base_Operation="_5rH6Q-5TEeitL-zKjjNp2A" polymorphic="true"/>
  <CppPropertySets:GeneralParameterProperties xmi:id="_5rNZ1O5TEeitL-zKjjNp2A" base_Parameter="_5rH6Re5TEeitL-zKjjNp2A" nativeType="const std::string&amp;"/>
  <CppPropertySets:GeneralParameterProperties xmi:id="_5rNZ1e5TEeitL-zKjjNp2A" base_Parameter="_5rH6R-5TEeitL-zKjjNp2A" nativeType="const std::string&amp;"/>
  <CppPropertySets:GeneralParameterProperties xmi:id="_5rNZ1u5TEeitL-zKjjNp2A" base_Parameter="_5rH6SO5TEeitL-zKjjNp2A" nativeType="ITCPConnection*"/>
  <CppPropertySets:GeneralOperationProperties xmi:id="_5rNZ1-5TEeitL-zKjjNp2A" base_Operation="_5rH6Se5TEeitL-zKjjNp2A" polymorphic="true"/>
  <CppPropertySets:GeneralParameterProperties xmi:id="_5rOA4O5TEeitL-zKjjNp2A" base_Parameter="_5rH6Su5TEeitL-zKjjNp2A" nativeType="const std::string&amp;"/>
  <CppPropertySets:GeneralParameterProperties xmi:id="_5rOA4e5TEeitL-zKjjNp2A" base_Parameter="_5rH6S-5TEeitL-zKjjNp2A" nativeType="ITCPConnection*"/>
  <Standard:Auxiliary xmi:id="_5rOn8O5TEeitL-zKjjNp2A" base_Class="_5rKWgO5TEeitL-zKjjNp2A"/>
  <CppPropertySets:GeneralInterfaceProperties xmi:id="_Vq8JMO5WEeitL-zKjjNp2A" base_Interface="_Vq7iIO5WEeitL-zKjjNp2A">
    <headerPreface xmi:id="_Vq8JMe5WEeitL-zKjjNp2A">
      <body><![CDATA[#include <string>]]></body>
    </headerPreface>
  </CppPropertySets:GeneralInterfaceProperties>
  <CppPropertySets:GeneralParameterProperties xmi:id="_Vq8JMu5WEeitL-zKjjNp2A" base_Parameter="_Vq7iIu5WEeitL-zKjjNp2A" nativeType="const std::string&amp;"/>
  <UMLRealTime:ProtocolContainer xmi:id="_ZJ5t8O5XEeitL-zKjjNp2A" base_Package="_ZJ5G4O5XEeitL-zKjjNp2A"/>
  <UMLRealTime:Protocol xmi:id="_ZJ6VAO5XEeitL-zKjjNp2A" base_Collaboration="_ZJ5G4e5XEeitL-zKjjNp2A"/>
  <UMLRealTime:InEvent xmi:id="_ZJ6VAe5XEeitL-zKjjNp2A" base_CallEvent="_ZJ5G7e5XEeitL-zKjjNp2A"/>
  <CppPropertySets:GeneralParameterProperties xmi:id="_UPBpMO50EeitL-zKjjNp2A" base_Parameter="_UPAbEe50EeitL-zKjjNp2A" nativeType="const std::string&amp;"/>
  <CppPropertySets:GeneralParameterProperties xmi:id="_9Y0HAPFTEeiGPObbQ5S9rA" base_Parameter="_9Yy44PFTEeiGPObbQ5S9rA" nativeType="const std::string&amp;"/>
  <CppPropertySets:GeneralParameterProperties xmi:id="_sj5i4PFUEeiGPObbQ5S9rA" base_Parameter="_sj470vFUEeiGPObbQ5S9rA" nativeType="const std::string&amp;"/>
  <CppPropertySets:GeneralOperationProperties xmi:id="_lBm2UPF5EeiGPObbQ5S9rA" base_Operation="_j8WecPF5EeiGPObbQ5S9rA" polymorphic="true"/>
  <CppPropertySets:GeneralAttributeProperties xmi:id="_d90I0PGMEeiGPObbQ5S9rA" base_Property="_btFcUPGMEeiGPObbQ5S9rA" nativeType="std::string"/>
  <CppPropertySets:GeneralClassProperties xmi:id="_s-LUMPGNEeiGPObbQ5S9rA" base_Class="_5rKWgO5TEeitL-zKjjNp2A">
    <headerPreface xmi:id="_s-NJYPGNEeiGPObbQ5S9rA">
      <body><![CDATA[#include <string>]]></body>
    </headerPreface>
  </CppPropertySets:GeneralClassProperties>
  <CppPropertySets:GeneralOperationProperties xmi:id="_gi1wsPGUEeiGPObbQ5S9rA" base_Operation="_dbgzYPGUEeiGPObbQ5S9rA" polymorphic="true"/>
  <CppPropertySets:GeneralParameterProperties xmi:id="_YPeFkHxrEemQvv1wPLSA6g" base_Parameter="_YPbpUXxrEemQvv1wPLSA6g" nativeType="const std::string&amp;"/>
  <CppPropertySets:GeneralParameterProperties xmi:id="_ETXVQLqtEem5vPW57wwiFQ" base_Parameter="_ETGPgLqtEem5vPW57wwiFQ" nativeType="std::string"/>
  <CppPropertySets:GeneralParameterProperties xmi:id="_8Mvo8Mr-Eemd-cvOi0spQQ" base_Parameter="_8MtMssr-Eemd-cvOi0spQQ" nativeType="const std::string&amp;"/>
  <CppPropertySets:GeneralAttributeProperties xmi:id="_bYMsEOTpEe6Re8YX3cK64Q" base_Property="_bYC7EOTpEe6Re8YX3cK64Q" nativeType="ServerJob*"/>
  <CppPropertySets:TargetRTSAttributeProperties xmi:id="_bYMsEeTpEe6Re8YX3cK64Q" base_Property="_bYC7EOTpEe6Re8YX3cK64Q" generateDescriptor="false"/>
</xmi:XMI>
