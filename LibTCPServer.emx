<?xml version="1.0" encoding="UTF-8"?>
<!--xtools2_universal_type_manager-->
<!--HCL RTist 11.3.0-->
<?com.ibm.xtools.emf.core.signature <signature id="com.ibm.xtools.uml.msl.model" version="7.0.0"><feature description="" name="com.ibm.xtools.ruml.feature" url="" version="7.0.0"/></signature>?>
<?com.ibm.xtools.emf.core.signature <signature id="com.ibm.xtools.mmi.ui.signatures.diagram" version="7.0.0"><feature description="" name="RTist Modeling Platform (com.ibm.xtools.rmp)" url="" version="7.0.0"/></signature>?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:CppPropertySets="http:///schemas/CppPropertySets/_5TG7AMk4EeO2m9WtkWjeeQ/67" xmlns:Default="http:///schemas/Default/_fNm3AAqoEd6-N_NOT9vsCA/2" xmlns:Standard="http://www.eclipse.org/uml2/schemas/Standard/1" xmlns:UMLRealTime="http:///schemas/UMLRealTime/_3TUzoHq6Ed2hSeAAWZznoA/119" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:notation="http://www.eclipse.org/gmf/runtime/1.0.2/notation" xmlns:uml="http://www.eclipse.org/uml2/3.0.0/UML" xmlns:umlnotation="http://www.ibm.com/xtools/1.5.3/Umlnotation" xsi:schemaLocation="http:///schemas/CppPropertySets/_5TG7AMk4EeO2m9WtkWjeeQ/67 pathmap://CPP_LANGUAGE_PROFILE/CppPropertySets.epx#_5TYAwMk4EeO2m9WtkWjeeQ?CppPropertySets/CppPropertySets? http:///schemas/Default/_fNm3AAqoEd6-N_NOT9vsCA/2 pathmap://UML2_MSL_PROFILES/Default.epx#_fNwoAAqoEd6-N_NOT9vsCA?Default/Default? http://www.eclipse.org/uml2/schemas/Standard/1 pathmap://UML_PROFILES/Standard.profile.uml#_yzU58YinEdqtvbnfB2L_5w http:///schemas/UMLRealTime/_3TUzoHq6Ed2hSeAAWZznoA/119 pathmap://RT_PROPERTIES/UMLRealTime.epx#_3TUzoXq6Ed2hSeAAWZznoA?UMLRealTime/UMLRealTime?">
  <uml:Package xmi:id="_n2OxwO5SEeitL-zKjjNp2A" name="LibTCPServer">
    <eAnnotations xmi:id="_n2Oxwe5SEeitL-zKjjNp2A" source="uml2.diagrams" references="_n2Oxwu5SEeitL-zKjjNp2A">
      <contents xmi:type="umlnotation:UMLDiagram" xmi:id="_n2Oxwu5SEeitL-zKjjNp2A" type="Class" name="API">
        <children xmi:type="umlnotation:UMLShape" xmi:id="_9AeFcO5TEeitL-zKjjNp2A" element="_5rHTMO5TEeitL-zKjjNp2A" fontName="Segoe UI" fontHeight="8" transparency="0" lineColor="14263149" lineWidth="1" showStereotype="Label">
          <children xmi:type="notation:DecorationNode" xmi:id="_9AesgO5TEeitL-zKjjNp2A" type="ImageCompartment">
            <layoutConstraint xmi:type="notation:Size" xmi:id="_9Aesge5TEeitL-zKjjNp2A" width="1320" height="1320"/>
          </children>
          <children xmi:type="notation:BasicDecorationNode" xmi:id="_9Aesgu5TEeitL-zKjjNp2A" type="Stereotype"/>
          <children xmi:type="notation:BasicDecorationNode" xmi:id="_9Aesg-5TEeitL-zKjjNp2A" type="Name"/>
          <children xmi:type="notation:BasicDecorationNode" xmi:id="_9AeshO5TEeitL-zKjjNp2A" type="Parent"/>
          <children xmi:type="notation:SemanticListCompartment" xmi:id="_9Aeshe5TEeitL-zKjjNp2A" type="AttributeCompartment"/>
          <children xmi:type="notation:SemanticListCompartment" xmi:id="_9AfTkO5TEeitL-zKjjNp2A" type="OperationCompartment"/>
          <children xmi:type="notation:SemanticListCompartment" xmi:id="_9AfTke5TEeitL-zKjjNp2A" visible="false" type="SignalCompartment"/>
          <children xmi:type="umlnotation:UMLShapeCompartment" xmi:id="_9AfTku5TEeitL-zKjjNp2A" visible="false" type="StructureCompartment"/>
          <children xmi:id="_9AfTk-5TEeitL-zKjjNp2A" type="portCompartment">
            <styles xmi:type="notation:DrawerStyle" xmi:id="_9AfTlO5TEeitL-zKjjNp2A"/>
            <styles xmi:type="notation:TitleStyle" xmi:id="_9AfTle5TEeitL-zKjjNp2A"/>
            <styles xmi:type="notation:SortingStyle" xmi:id="_9AfTlu5TEeitL-zKjjNp2A"/>
            <styles xmi:type="notation:FilteringStyle" xmi:id="_9AfTl-5TEeitL-zKjjNp2A"/>
          </children>
          <layoutConstraint xmi:type="notation:Bounds" xmi:id="_9AeFce5TEeitL-zKjjNp2A" x="7112" y="2159"/>
        </children>
        <children xmi:type="umlnotation:UMLShape" xmi:id="__TUR0O5TEeitL-zKjjNp2A" element="_5rKWgO5TEeitL-zKjjNp2A" fontName="Segoe UI" fontHeight="8" transparency="0" lineColor="14263149" lineWidth="1" showStereotype="Label">
          <children xmi:type="notation:DecorationNode" xmi:id="__TUR0u5TEeitL-zKjjNp2A" type="ImageCompartment">
            <layoutConstraint xmi:type="notation:Size" xmi:id="__TUR0-5TEeitL-zKjjNp2A" width="1320" height="1320"/>
          </children>
          <children xmi:type="notation:BasicDecorationNode" xmi:id="__TU44O5TEeitL-zKjjNp2A" type="Stereotype"/>
          <children xmi:type="notation:BasicDecorationNode" xmi:id="__TU44e5TEeitL-zKjjNp2A" type="Name"/>
          <children xmi:type="notation:BasicDecorationNode" xmi:id="__TU44u5TEeitL-zKjjNp2A" type="Parent"/>
          <children xmi:type="notation:SemanticListCompartment" xmi:id="__TU44-5TEeitL-zKjjNp2A" type="AttributeCompartment"/>
          <children xmi:type="notation:SemanticListCompartment" xmi:id="__TU45O5TEeitL-zKjjNp2A" type="OperationCompartment"/>
          <children xmi:type="notation:SemanticListCompartment" xmi:id="__TVf8O5TEeitL-zKjjNp2A" visible="false" type="SignalCompartment"/>
          <children xmi:type="umlnotation:UMLShapeCompartment" xmi:id="__TVf8e5TEeitL-zKjjNp2A" visible="false" type="StructureCompartment"/>
          <layoutConstraint xmi:type="notation:Bounds" xmi:id="__TUR0e5TEeitL-zKjjNp2A" x="15494" y="2413"/>
        </children>
        <children xmi:type="notation:Shape" xmi:id="_DUwG8O5UEeitL-zKjjNp2A" type="Note" fontName="Segoe UI" fontHeight="8" description="&lt;p>Inherit from this capsule and create a part typed by the inherited capsule in your application. This will enable it to receive incoming requests over TCP. The requests are by default assumed to be JSON encoded and in a certain format, which for example allows to send events via the ports of the inherited capsule to other capsules in the application. However, by overriding &lt;b>handleReceivedMessageCustom()&lt;/b> you can implement custom handling of incoming requests.&lt;/p>&lt;p>All configuration of the TCPServer capsule is done by means of the TCPServer_Config data class.&lt;/p>&lt;p>See &lt;a href=&quot;https://github.com/hcl-pnp-rtist/lib-tcp-server&quot; rel=&quot;&quot;>the GitHub repository&lt;/a> for information about the JSON format that is supported by default.&lt;/p>" fillColor="13956346" transparency="0" lineColor="12632258" lineWidth="1">
          <children xmi:type="notation:BasicDecorationNode" xmi:id="_DUxVEO5UEeitL-zKjjNp2A" type="DiagramName">
            <element xsi:nil="true"/>
          </children>
          <children xmi:type="notation:BasicDecorationNode" xmi:id="_DUxVEe5UEeitL-zKjjNp2A" type="Description">
            <element xsi:nil="true"/>
          </children>
          <styles xmi:type="notation:TextStyle" xmi:id="_DUwG8e5UEeitL-zKjjNp2A"/>
          <styles xmi:type="notation:LineTypeStyle" xmi:id="_DUwG8u5UEeitL-zKjjNp2A"/>
          <element xsi:nil="true"/>
          <layoutConstraint xmi:type="notation:Bounds" xmi:id="_DUwG8-5UEeitL-zKjjNp2A" x="889" y="2159" width="5607" height="7494"/>
        </children>
        <children xmi:type="notation:Shape" xmi:id="_kdX4MO5VEeitL-zKjjNp2A" type="Note" fontName="Segoe UI" fontHeight="8" description="&lt;p>Library for letting an RTist application communicate over TCP with other applications. For example, external applications can use it to send events into the RTist application. Note that this library uses the POCO library, so you must first download and build it before you can build this library.&lt;/p>" fillColor="13956346" transparency="0" lineColor="12632258" lineWidth="1">
          <children xmi:type="notation:BasicDecorationNode" xmi:id="_kdYfQO5VEeitL-zKjjNp2A" type="DiagramName">
            <element xsi:nil="true"/>
          </children>
          <children xmi:type="notation:BasicDecorationNode" xmi:id="_kdYfQe5VEeitL-zKjjNp2A" type="Description">
            <element xsi:nil="true"/>
          </children>
          <styles xmi:type="notation:TextStyle" xmi:id="_kdX4Me5VEeitL-zKjjNp2A"/>
          <styles xmi:type="notation:LineTypeStyle" xmi:id="_kdX4Mu5VEeitL-zKjjNp2A"/>
          <element xsi:nil="true"/>
          <layoutConstraint xmi:type="notation:Bounds" xmi:id="_kdX4M-5VEeitL-zKjjNp2A" x="889" y="381" width="17926"/>
        </children>
        <children xmi:type="umlnotation:UMLClassifierShape" xmi:id="_Wz-04O5WEeitL-zKjjNp2A" element="_Vq7iIO5WEeitL-zKjjNp2A" fontName="Segoe UI" fontHeight="8" transparency="0" lineColor="14263149" lineWidth="1" showStereotype="Label" useClassifierShape="true">
          <children xmi:type="notation:DecorationNode" xmi:id="_Wz-04u5WEeitL-zKjjNp2A" type="ImageCompartment">
            <layoutConstraint xmi:type="notation:Size" xmi:id="_Wz-04-5WEeitL-zKjjNp2A" width="530" height="530"/>
          </children>
          <children xmi:type="notation:BasicDecorationNode" xmi:id="_Wz-05O5WEeitL-zKjjNp2A" type="Stereotype"/>
          <children xmi:type="notation:BasicDecorationNode" xmi:id="_Wz-05e5WEeitL-zKjjNp2A" type="Kind"/>
          <children xmi:type="notation:BasicDecorationNode" xmi:id="_Wz_b8O5WEeitL-zKjjNp2A" type="Name"/>
          <children xmi:type="notation:BasicDecorationNode" xmi:id="_Wz_b8e5WEeitL-zKjjNp2A" type="Parent"/>
          <children xmi:type="notation:SemanticListCompartment" xmi:id="_Wz_b8u5WEeitL-zKjjNp2A" type="AttributeCompartment"/>
          <children xmi:type="notation:SemanticListCompartment" xmi:id="_Wz_b8-5WEeitL-zKjjNp2A" type="OperationCompartment"/>
          <children xmi:type="notation:SemanticListCompartment" xmi:id="_Wz_b9O5WEeitL-zKjjNp2A" visible="false" type="SignalCompartment"/>
          <layoutConstraint xmi:type="notation:Bounds" xmi:id="_Wz-04e5WEeitL-zKjjNp2A" x="16637" y="8128"/>
        </children>
        <children xmi:type="notation:Shape" xmi:id="_oWKSMO5WEeitL-zKjjNp2A" type="Note" fontName="Segoe UI" fontHeight="8" description="&lt;p>Represents an ongoing TCP connection. Call the &lt;b>reply()&lt;/b> operation to write a reply message to the remote application, and then terminate the connection.&lt;/p>" fillColor="13956346" transparency="0" lineColor="12632258" lineWidth="1">
          <children xmi:type="notation:BasicDecorationNode" xmi:id="_oWK5QO5WEeitL-zKjjNp2A" type="DiagramName">
            <element xsi:nil="true"/>
          </children>
          <children xmi:type="notation:BasicDecorationNode" xmi:id="_oWK5Qe5WEeitL-zKjjNp2A" type="Description">
            <element xsi:nil="true"/>
          </children>
          <styles xmi:type="notation:TextStyle" xmi:id="_oWKSMe5WEeitL-zKjjNp2A"/>
          <styles xmi:type="notation:LineTypeStyle" xmi:id="_oWKSMu5WEeitL-zKjjNp2A"/>
          <element xsi:nil="true"/>
          <layoutConstraint xmi:type="notation:Bounds" xmi:id="_oWKSM-5WEeitL-zKjjNp2A" x="9398" y="8128" width="6179"/>
        </children>
        <children xmi:type="umlnotation:UMLShape" xmi:id="_n8GW8O5XEeitL-zKjjNp2A" element="_ZJ5G4e5XEeitL-zKjjNp2A" fontName="Segoe UI" fontHeight="8" transparency="0" lineColor="14263149" lineWidth="1" showStereotype="Label">
          <children xmi:type="notation:DecorationNode" xmi:id="_n8G-AO5XEeitL-zKjjNp2A" type="ImageCompartment">
            <layoutConstraint xmi:type="notation:Size" xmi:id="_n8G-Ae5XEeitL-zKjjNp2A" width="1320" height="1320"/>
          </children>
          <children xmi:type="notation:BasicDecorationNode" xmi:id="_n8G-Au5XEeitL-zKjjNp2A" type="Stereotype"/>
          <children xmi:type="notation:BasicDecorationNode" xmi:id="_n8G-A-5XEeitL-zKjjNp2A" type="Name"/>
          <children xmi:type="notation:BasicDecorationNode" xmi:id="_n8G-BO5XEeitL-zKjjNp2A" type="Parent"/>
          <children xmi:id="_n8HlEO5XEeitL-zKjjNp2A" type="inEventCompartment">
            <styles xmi:type="notation:DrawerStyle" xmi:id="_n8HlEe5XEeitL-zKjjNp2A"/>
            <styles xmi:type="notation:TitleStyle" xmi:id="_n8HlEu5XEeitL-zKjjNp2A"/>
            <styles xmi:type="notation:SortingStyle" xmi:id="_n8HlE-5XEeitL-zKjjNp2A"/>
            <styles xmi:type="notation:FilteringStyle" xmi:id="_n8HlFO5XEeitL-zKjjNp2A"/>
          </children>
          <children xmi:id="_n8HlFe5XEeitL-zKjjNp2A" type="outEventCompartment">
            <styles xmi:type="notation:DrawerStyle" xmi:id="_n8HlFu5XEeitL-zKjjNp2A"/>
            <styles xmi:type="notation:TitleStyle" xmi:id="_n8HlF-5XEeitL-zKjjNp2A"/>
            <styles xmi:type="notation:SortingStyle" xmi:id="_n8HlGO5XEeitL-zKjjNp2A"/>
            <styles xmi:type="notation:FilteringStyle" xmi:id="_n8HlGe5XEeitL-zKjjNp2A"/>
          </children>
          <layoutConstraint xmi:type="notation:Bounds" xmi:id="_n8GW8e5XEeitL-zKjjNp2A" x="16637" y="10922"/>
        </children>
        <element xsi:nil="true"/>
        <edges xmi:type="umlnotation:UMLConnector" xmi:id="__Ta_gO5TEeitL-zKjjNp2A" element="_5rLkoO5TEeitL-zKjjNp2A" source="_9AeFcO5TEeitL-zKjjNp2A" target="__TUR0O5TEeitL-zKjjNp2A" fontName="Segoe UI" fontHeight="8" roundedBendpointsRadius="4" routing="Rectilinear" lineColor="8421504" lineWidth="1" showStereotype="Text">
          <children xmi:type="notation:DecorationNode" xmi:id="__TbmkO5TEeitL-zKjjNp2A" type="NameLabel">
            <children xmi:type="notation:BasicDecorationNode" xmi:id="__Tbmku5TEeitL-zKjjNp2A" type="Stereotype"/>
            <children xmi:type="notation:BasicDecorationNode" xmi:id="__Tbmk-5TEeitL-zKjjNp2A" type="Name"/>
            <layoutConstraint xmi:type="notation:Bounds" xmi:id="__Tbmke5TEeitL-zKjjNp2A" y="-149"/>
          </children>
          <children xmi:type="notation:DecorationNode" xmi:id="__TbmlO5TEeitL-zKjjNp2A" type="ToMultiplicityLabel" element="_5rLkoe5TEeitL-zKjjNp2A">
            <children xmi:type="notation:BasicDecorationNode" xmi:id="__TcNoO5TEeitL-zKjjNp2A" type="ToMultiplicity"/>
            <layoutConstraint xmi:type="notation:Location" xmi:id="__Tbmle5TEeitL-zKjjNp2A" y="317"/>
          </children>
          <children xmi:type="notation:DecorationNode" xmi:id="__TcNoe5TEeitL-zKjjNp2A" type="ToRoleLabel" element="_5rLkoe5TEeitL-zKjjNp2A">
            <children xmi:type="notation:BasicDecorationNode" xmi:id="__TcNo-5TEeitL-zKjjNp2A" type="ToRole"/>
            <layoutConstraint xmi:type="notation:Location" xmi:id="__TcNou5TEeitL-zKjjNp2A" y="-318"/>
          </children>
          <children xmi:type="notation:DecorationNode" xmi:id="__TcNpO5TEeitL-zKjjNp2A" type="FromMultiplicityLabel" element="_5rHTN-5TEeitL-zKjjNp2A">
            <children xmi:type="notation:BasicDecorationNode" xmi:id="__TcNpu5TEeitL-zKjjNp2A" type="FromMultiplicity"/>
            <layoutConstraint xmi:type="notation:Location" xmi:id="__TcNpe5TEeitL-zKjjNp2A" y="317"/>
          </children>
          <children xmi:type="notation:DecorationNode" xmi:id="__TcNp-5TEeitL-zKjjNp2A" type="FromRoleLabel" element="_5rHTN-5TEeitL-zKjjNp2A">
            <children xmi:type="notation:BasicDecorationNode" xmi:id="__TcNqe5TEeitL-zKjjNp2A" type="FromRole"/>
            <layoutConstraint xmi:type="notation:Location" xmi:id="__TcNqO5TEeitL-zKjjNp2A" y="-318"/>
          </children>
          <children xmi:type="notation:DecorationNode" xmi:id="__TcNqu5TEeitL-zKjjNp2A" type="ToQualifierLabel" element="_5rLkoe5TEeitL-zKjjNp2A">
            <children xmi:type="notation:SemanticListCompartment" xmi:id="__Tc0se5TEeitL-zKjjNp2A" type="QualifierCompartment"/>
            <layoutConstraint xmi:type="notation:Location" xmi:id="__Tc0sO5TEeitL-zKjjNp2A" y="-149"/>
          </children>
          <children xmi:type="notation:DecorationNode" xmi:id="__Tc0su5TEeitL-zKjjNp2A" type="FromQualifierLabel" element="_5rHTN-5TEeitL-zKjjNp2A">
            <children xmi:type="notation:SemanticListCompartment" xmi:id="__Tc0tO5TEeitL-zKjjNp2A" type="QualifierCompartment"/>
            <layoutConstraint xmi:type="notation:Location" xmi:id="__Tc0s-5TEeitL-zKjjNp2A" y="-149"/>
          </children>
          <children xmi:type="notation:DecorationNode" xmi:id="__Tc0te5TEeitL-zKjjNp2A" type="ToConstraintLabel" element="_5rLkoe5TEeitL-zKjjNp2A">
            <children xmi:type="notation:ListCompartment" xmi:id="__TdbwO5TEeitL-zKjjNp2A" type="ToConstraintCompartment"/>
            <layoutConstraint xmi:type="notation:Location" xmi:id="__Tc0tu5TEeitL-zKjjNp2A" y="846"/>
          </children>
          <children xmi:type="notation:DecorationNode" xmi:id="__Tdbwe5TEeitL-zKjjNp2A" type="FromConstraintLabel" element="_5rHTN-5TEeitL-zKjjNp2A">
            <children xmi:type="notation:ListCompartment" xmi:id="__Tdbw-5TEeitL-zKjjNp2A" type="FromConstraintCompartment"/>
            <layoutConstraint xmi:type="notation:Location" xmi:id="__Tdbwu5TEeitL-zKjjNp2A" y="846"/>
          </children>
          <bendpoints xmi:type="notation:RelativeBendpoints" xmi:id="__Ta_ge5TEeitL-zKjjNp2A" points="[0, 0, 0, 0]$[0, 0, 0, 0]"/>
        </edges>
        <edges xmi:type="notation:Connector" xmi:id="_FSeX4O5UEeitL-zKjjNp2A" type="NoteAttachment" source="_9AeFcO5TEeitL-zKjjNp2A" target="_DUwG8O5UEeitL-zKjjNp2A" lineColor="0" lineWidth="1">
          <styles xmi:type="notation:ArrowStyle" xmi:id="_FSeX4e5UEeitL-zKjjNp2A"/>
          <styles xmi:type="notation:LineTypeStyle" xmi:id="_FSeX4u5UEeitL-zKjjNp2A"/>
          <element xsi:nil="true"/>
          <bendpoints xmi:type="notation:RelativeBendpoints" xmi:id="_FSeX4-5UEeitL-zKjjNp2A" points="[-117, -8, 208, 4]$[-275, -8, 50, 4]"/>
        </edges>
        <edges xmi:type="notation:Connector" xmi:id="_AzfjwO5XEeitL-zKjjNp2A" type="NoteAttachment" source="_Wz-04O5WEeitL-zKjjNp2A" target="_oWKSMO5WEeitL-zKjjNp2A" lineColor="0" lineWidth="1">
          <styles xmi:type="notation:ArrowStyle" xmi:id="_Azfjwe5XEeitL-zKjjNp2A"/>
          <styles xmi:type="notation:LineTypeStyle" xmi:id="_Azfjwu5XEeitL-zKjjNp2A"/>
          <element xsi:nil="true"/>
          <bendpoints xmi:type="notation:RelativeBendpoints" xmi:id="_Azfjw-5XEeitL-zKjjNp2A" points="[-76, -7, 77, 1]$[-152, -35, 1, -27]"/>
          <targetAnchor xmi:type="notation:IdentityAnchor" xmi:id="_Azgx4O5XEeitL-zKjjNp2A" id="(0.9111506716297135,0.37755102040816324)"/>
        </edges>
      </contents>
    </eAnnotations>
    <eAnnotations xmi:id="_n2Oxw-5SEeitL-zKjjNp2A" source="com.ibm.xtools.common.ui.reduction.editingCapabilities">
      <details xmi:id="_n2OxxO5SEeitL-zKjjNp2A" key="umldt.rt.activity" value="2"/>
      <details xmi:id="_n2Oxxe5SEeitL-zKjjNp2A" key="umldt.activity" value="2"/>
      <details xmi:id="_n2Oxxu5SEeitL-zKjjNp2A" key="uml.rt.activity" value="2"/>
      <details xmi:id="_n2Oxx-5SEeitL-zKjjNp2A" key="com.ibm.xtools.activities.cppModelingActivity" value="1"/>
    </eAnnotations>
    <packageImport xmi:id="_n2OxyO5SEeitL-zKjjNp2A">
      <eAnnotations xmi:id="_n2Oxye5SEeitL-zKjjNp2A" source="RSA_ElementImport"/>
      <importedPackage xmi:type="uml:Model" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/RTClasses.emx#_1MnNgJwwEdu4wYUZIlQWkw?RTClasses?"/>
    </packageImport>
    <packageImport xmi:id="_n2Oxyu5SEeitL-zKjjNp2A">
      <eAnnotations xmi:id="_n2Oxy-5SEeitL-zKjjNp2A" source="RSA_ElementImport"/>
      <importedPackage xmi:type="uml:Model" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_f0875BKyEdyaM9S2zG4bgA?CppPrimitiveDatatypes?"/>
    </packageImport>
    <packageImport xmi:id="_n2OxzO5SEeitL-zKjjNp2A">
      <eAnnotations xmi:id="_n2Oxze5SEeitL-zKjjNp2A" source="RSA_ElementImport"/>
      <importedPackage xmi:type="uml:Model" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/RTComponents.emx#__QdLdUB2PEd2Vrcc_Gxok_A37F129B1035A?RTComponents?"/>
    </packageImport>
    <packagedElement xmi:type="uml:Class" xmi:id="_5rHTMO5TEeitL-zKjjNp2A" name="TCPServer" clientDependency="_RtbVUO5XEeitL-zKjjNp2A _ZmbWsPLdEeiUbIS8Ru5zVw">
      <eAnnotations xmi:id="_5rHTMe5TEeitL-zKjjNp2A" source="uml2.diagrams" references="_5rHTMu5TEeitL-zKjjNp2A">
        <contents xmi:type="umlnotation:UMLDiagram" xmi:id="_5rHTMu5TEeitL-zKjjNp2A" type="Structure" element="_5rHTMO5TEeitL-zKjjNp2A" measurementUnit="Himetric">
          <children xmi:type="umlnotation:UMLShape" xmi:id="_5rHTM-5TEeitL-zKjjNp2A" type="StructureDiagramFrame" element="_5rHTMO5TEeitL-zKjjNp2A" fontName="Segoe UI" fontHeight="8" transparency="0" lineColor="14263149" lineWidth="1" showStereotype="Label">
            <children xmi:type="umlnotation:UMLShapeCompartment" xmi:id="_5rHTNO5TEeitL-zKjjNp2A" type="StructureCompartment"/>
            <children xmi:type="notation:BasicDecorationNode" xmi:id="_5rHTNe5TEeitL-zKjjNp2A" type="Name"/>
            <layoutConstraint xmi:type="notation:Bounds" xmi:id="_5rHTNu5TEeitL-zKjjNp2A" x="635" y="635"/>
          </children>
        </contents>
      </eAnnotations>
      <ownedAttribute xmi:id="_5rHTN-5TEeitL-zKjjNp2A" name="config" visibility="protected" type="_5rKWgO5TEeitL-zKjjNp2A" aggregation="composite" association="_5rLkoO5TEeitL-zKjjNp2A">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_5rHTOO5TEeitL-zKjjNp2A" value="1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_5rHTOe5TEeitL-zKjjNp2A" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_5rHTO-5TEeitL-zKjjNp2A" name="external" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/RTClasses.emx#_17NVsrIlEduJc5NEaBCMOw?RTClasses/External/External?"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_5rHTPO5TEeitL-zKjjNp2A" name="control" type="_ZJ5G4e5XEeitL-zKjjNp2A" aggregation="composite" isBehavior="true"/>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_5rHTPe5TEeitL-zKjjNp2A" name="State Machine">
        <eAnnotations xmi:id="_5rHTPu5TEeitL-zKjjNp2A" source="uml2.diagrams" references="_5rHTP-5TEeitL-zKjjNp2A">
          <contents xmi:type="umlnotation:UMLDiagram" xmi:id="_5rHTP-5TEeitL-zKjjNp2A" type="Statechart" element="_5rHTPe5TEeitL-zKjjNp2A" measurementUnit="Himetric">
            <children xmi:type="umlnotation:UMLFrame" xmi:id="_5rHTQO5TEeitL-zKjjNp2A" type="Statemachine" element="_5rHTPe5TEeitL-zKjjNp2A" fontName="Segoe UI" fontHeight="8" bold="true" transparency="0" lineColor="14263149" lineWidth="1" showStereotype="Label" alignment="Horizontal">
              <children xmi:type="umlnotation:UMLShapeCompartment" xmi:id="_5rHTQe5TEeitL-zKjjNp2A" type="Region" element="_5rHTd-5TEeitL-zKjjNp2A" verticalAlignment="false">
                <children xmi:type="umlnotation:UMLShape" xmi:id="_5rHTQu5TEeitL-zKjjNp2A" element="_5rHTeO5TEeitL-zKjjNp2A" fontName="Segoe UI" fontHeight="8" fillColor="15912618" transparency="0" lineColor="15912618" lineWidth="1" showStereotype="Label">
                  <children xmi:type="notation:DecorationNode" xmi:id="_5rHTQ-5TEeitL-zKjjNp2A" type="NameLabel">
                    <children xmi:type="notation:BasicDecorationNode" xmi:id="_5rHTRO5TEeitL-zKjjNp2A" type="Stereotype"/>
                    <children xmi:type="notation:BasicDecorationNode" xmi:id="_5rHTRe5TEeitL-zKjjNp2A" type="Name"/>
                    <children xmi:type="notation:BasicDecorationNode" xmi:id="_5rHTRu5TEeitL-zKjjNp2A" type="Parent"/>
                    <layoutConstraint xmi:type="notation:Bounds" xmi:id="_5rHTR-5TEeitL-zKjjNp2A" y="-149"/>
                  </children>
                  <layoutConstraint xmi:type="notation:Bounds" xmi:id="_5rHTSO5TEeitL-zKjjNp2A" x="3568" y="1061"/>
                </children>
                <children xmi:type="umlnotation:UMLShape" xmi:id="_5rHTSe5TEeitL-zKjjNp2A" element="_5rHTee5TEeitL-zKjjNp2A" fontName="Segoe UI" fontHeight="8" transparency="0" lineColor="14263149" lineWidth="1" showStereotype="Label">
                  <children xmi:type="notation:DecorationNode" xmi:id="_5rHTSu5TEeitL-zKjjNp2A" type="ImageCompartment">
                    <layoutConstraint xmi:type="notation:Size" xmi:id="_5rHTS-5TEeitL-zKjjNp2A" width="1320" height="1320"/>
                  </children>
                  <children xmi:type="notation:BasicDecorationNode" xmi:id="_5rHTTO5TEeitL-zKjjNp2A" type="Stereotype"/>
                  <children xmi:type="notation:BasicDecorationNode" xmi:id="_5rHTTe5TEeitL-zKjjNp2A" type="Name"/>
                  <children xmi:type="notation:BasicDecorationNode" xmi:id="_5rHTTu5TEeitL-zKjjNp2A" type="Parent"/>
                  <children xmi:type="notation:ListCompartment" xmi:id="_5rHTT-5TEeitL-zKjjNp2A" visible="false" type="Activities"/>
                  <children xmi:type="notation:ListCompartment" xmi:id="_5rHTUO5TEeitL-zKjjNp2A" visible="false" type="InternalTransitionCompartment"/>
                  <layoutConstraint xmi:type="notation:Bounds" xmi:id="_5rHTUe5TEeitL-zKjjNp2A" x="2171" y="2839" width="3022" height="1417"/>
                </children>
                <children xmi:type="umlnotation:UMLShape" xmi:id="_bd2GgO5XEeitL-zKjjNp2A" element="_bd0RUO5XEeitL-zKjjNp2A" fontName="Segoe UI" fontHeight="8" transparency="0" lineColor="14263149" lineWidth="1" showStereotype="Label">
                  <children xmi:type="notation:DecorationNode" xmi:id="_bd2Ggu5XEeitL-zKjjNp2A" type="ImageCompartment">
                    <layoutConstraint xmi:type="notation:Size" xmi:id="_bd2Gg-5XEeitL-zKjjNp2A" width="1320" height="1320"/>
                  </children>
                  <children xmi:type="notation:BasicDecorationNode" xmi:id="_bd2tkO5XEeitL-zKjjNp2A" type="Stereotype"/>
                  <children xmi:type="notation:BasicDecorationNode" xmi:id="_bd2tke5XEeitL-zKjjNp2A" type="Name"/>
                  <children xmi:type="notation:BasicDecorationNode" xmi:id="_bd2tku5XEeitL-zKjjNp2A" type="Parent"/>
                  <children xmi:type="notation:ListCompartment" xmi:id="_bd2tk-5XEeitL-zKjjNp2A" visible="false" type="Activities"/>
                  <children xmi:type="notation:ListCompartment" xmi:id="_bd2tlO5XEeitL-zKjjNp2A" visible="false" type="InternalTransitionCompartment"/>
                  <layoutConstraint xmi:type="notation:Bounds" xmi:id="_bd2Gge5XEeitL-zKjjNp2A" x="3441" y="5633"/>
                </children>
              </children>
              <children xmi:type="notation:BasicDecorationNode" xmi:id="_5rHTW-5TEeitL-zKjjNp2A" type="Name"/>
              <layoutConstraint xmi:type="notation:Bounds" xmi:id="_5rHTXO5TEeitL-zKjjNp2A" x="635" y="635"/>
            </children>
            <edges xmi:type="umlnotation:UMLConnector" xmi:id="_5rHTXe5TEeitL-zKjjNp2A" element="_5rHTfO5TEeitL-zKjjNp2A" source="_5rHTQu5TEeitL-zKjjNp2A" target="_5rHTSe5TEeitL-zKjjNp2A" fontName="Segoe UI" fontHeight="8" roundedBendpointsRadius="4" lineColor="8421504" lineWidth="1" showStereotype="Text">
              <children xmi:type="notation:DecorationNode" xmi:id="_5rHTXu5TEeitL-zKjjNp2A" type="TransitionLabelCompartment">
                <children xmi:type="notation:BasicDecorationNode" xmi:id="_5rHTX-5TEeitL-zKjjNp2A" type="Stereotype"/>
                <children xmi:type="notation:BasicDecorationNode" xmi:id="_5rHTYO5TEeitL-zKjjNp2A" type="TransitionLabel"/>
                <children xmi:type="notation:ListCompartment" xmi:id="_5rHTYe5TEeitL-zKjjNp2A" type="Triggers"/>
                <layoutConstraint xmi:type="notation:Bounds" xmi:id="_5rHTYu5TEeitL-zKjjNp2A" y="-149"/>
              </children>
              <bendpoints xmi:type="notation:RelativeBendpoints" xmi:id="_5rHTY-5TEeitL-zKjjNp2A" points="[0, 0, 0, -1270]$[0, 1270, 0, 0]"/>
              <sourceAnchor xmi:type="notation:IdentityAnchor" xmi:id="_5rHTZO5TEeitL-zKjjNp2A" id="(0.4988179669030733,1.0)"/>
              <targetAnchor xmi:type="notation:IdentityAnchor" xmi:id="_5rHTZe5TEeitL-zKjjNp2A" id="(0.5390469887491728,0.0)"/>
            </edges>
            <edges xmi:type="umlnotation:UMLConnector" xmi:id="_5rHTZu5TEeitL-zKjjNp2A" element="_5rHTgO5TEeitL-zKjjNp2A" source="_5rHTSe5TEeitL-zKjjNp2A" target="_5rHTSe5TEeitL-zKjjNp2A" fontName="Segoe UI" fontHeight="8" roundedBendpointsRadius="4" lineColor="8421504" lineWidth="1" showStereotype="Text">
              <children xmi:type="notation:DecorationNode" xmi:id="_5rHTZ-5TEeitL-zKjjNp2A" type="TransitionLabelCompartment">
                <children xmi:type="notation:BasicDecorationNode" xmi:id="_5rHTaO5TEeitL-zKjjNp2A" type="Stereotype"/>
                <children xmi:type="notation:BasicDecorationNode" xmi:id="_5rHTae5TEeitL-zKjjNp2A" type="TransitionLabel"/>
                <children xmi:type="notation:ListCompartment" xmi:id="_5rHTau5TEeitL-zKjjNp2A" type="Triggers"/>
                <layoutConstraint xmi:type="notation:Bounds" xmi:id="_5rHTa-5TEeitL-zKjjNp2A" x="-42" y="1016"/>
              </children>
              <bendpoints xmi:type="notation:RelativeBendpoints" xmi:id="_5rHTbO5TEeitL-zKjjNp2A" points="[0, 0, -127, 677]$[127, -677, 0, 0]"/>
              <sourceAnchor xmi:type="notation:IdentityAnchor" xmi:id="_5rHTbe5TEeitL-zKjjNp2A" id="(0.8752481800132362,0.7014820042342979)"/>
              <targetAnchor xmi:type="notation:IdentityAnchor" xmi:id="_5rHTbu5TEeitL-zKjjNp2A" id="(1.0,0.3577981651376147)"/>
            </edges>
            <edges xmi:type="umlnotation:UMLConnector" xmi:id="_dEO1gO5XEeitL-zKjjNp2A" element="_dEMZQO5XEeitL-zKjjNp2A" source="_5rHTSe5TEeitL-zKjjNp2A" target="_bd2GgO5XEeitL-zKjjNp2A" fontName="Segoe UI" fontHeight="8" roundedBendpointsRadius="4" routing="Rectilinear" lineColor="8421504" lineWidth="1" showStereotype="Text">
              <children xmi:type="notation:DecorationNode" xmi:id="_dEO1gu5XEeitL-zKjjNp2A" type="TransitionLabelCompartment">
                <children xmi:type="notation:BasicDecorationNode" xmi:id="_dEO1hO5XEeitL-zKjjNp2A" type="Stereotype"/>
                <children xmi:type="notation:BasicDecorationNode" xmi:id="_dEO1he5XEeitL-zKjjNp2A" type="TransitionLabel"/>
                <children xmi:type="notation:ListCompartment" xmi:id="_dEO1hu5XEeitL-zKjjNp2A" type="Triggers"/>
                <layoutConstraint xmi:type="notation:Bounds" xmi:id="_dEO1g-5XEeitL-zKjjNp2A" y="-149"/>
              </children>
              <bendpoints xmi:type="notation:RelativeBendpoints" xmi:id="_dEO1ge5XEeitL-zKjjNp2A" points="[-359, 591, 226, -1907]$[-681, 1969, -96, -529]"/>
              <sourceAnchor xmi:type="notation:IdentityAnchor" xmi:id="_dE0rYO5XEeitL-zKjjNp2A" id="(0.7564526803441429,0.5822159491884262)"/>
            </edges>
          </contents>
        </eAnnotations>
        <region xmi:id="_5rHTd-5TEeitL-zKjjNp2A" name="Region1">
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_5rHTeO5TEeitL-zKjjNp2A"/>
          <subvertex xmi:type="uml:State" xmi:id="_5rHTee5TEeitL-zKjjNp2A" name="WaitForRequest">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5rHTeu5TEeitL-zKjjNp2A" name="Entry">
              <language>C++</language>
              <body>external.enable();</body>
            </entry>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_bd0RUO5XEeitL-zKjjNp2A" name="Stopped"/>
          <transition xmi:id="_5rHTfO5TEeitL-zKjjNp2A" name="Initial" source="_5rHTeO5TEeitL-zKjjNp2A" target="_5rHTee5TEeitL-zKjjNp2A">
            <eAnnotations xmi:id="_5rHTfe5TEeitL-zKjjNp2A" source="uml2.alias">
              <details xmi:id="_5rHTfu5TEeitL-zKjjNp2A" key="Initial"/>
            </eAnnotations>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5rHTf-5TEeitL-zKjjNp2A" name="Effect">
              <language>C++</language>
              <body>// Give the subcapsule a chance to override configuration properties&#xD;
init();&#xD;
// set-up a server socket&#xD;
&#xD;
LocalServerConnection *lsc = new LocalServerConnection(*this);&#xD;
&#xD;
//cout &lt;&lt; &quot;TCP server started&quot; &lt;&lt; endl;</body>
            </effect>
          </transition>
          <transition xmi:id="_5rHTgO5TEeitL-zKjjNp2A" name="requestReceived" source="_5rHTee5TEeitL-zKjjNp2A" target="_5rHTee5TEeitL-zKjjNp2A">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5rHTge5TEeitL-zKjjNp2A" name="Effect">
              <language>C++</language>
              <body>	// Process all available external data&#xD;
	unsigned int remaining;&#xD;
	do {&#xD;
		std::pair&lt;std::string, LocalServerConnection*>* data;&#xD;
		remaining = external.dataPopFront((void**) &amp;data);&#xD;
		if (data == 0)&#xD;
			break;&#xD;
&#xD;
		std::string&amp; str = data->first;&#xD;
		if (config.logToStdOut)&#xD;
			std::cout &lt;&lt; &quot;External data: &quot; &lt;&lt; str &lt;&lt; std::endl;&#xD;
&#xD;
		if (config.defaultHandlingOfReceivedMessages) {&#xD;
			// Perform default message handling, assuming JSON encoded messages on RT specific format&#xD;
			handleReceivedMessageDefault(str, data->second);&#xD;
		}&#xD;
		else {&#xD;
			// Let subclasses implement a custom handling of the received message&#xD;
			handleReceivedMessageCustom(str, data->second);&#xD;
		}&#xD;
&#xD;
		delete data;&#xD;
	}&#xD;
	while (remaining > 0);&#xD;
&#xD;
</body>
            </effect>
            <trigger xmi:id="_5rHTgu5TEeitL-zKjjNp2A" name="" port="_5rHTO-5TEeitL-zKjjNp2A">
              <event xmi:type="uml:CallEvent" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/RTClasses.emx#_17fplbIlEduJc5NEaBCMOw?RTClasses/External/event?"/>
            </trigger>
          </transition>
          <transition xmi:id="_dEMZQO5XEeitL-zKjjNp2A" name="stop" source="_5rHTee5TEeitL-zKjjNp2A" target="_bd0RUO5XEeitL-zKjjNp2A">
            <trigger xmi:id="_5ngowO5XEeitL-zKjjNp2A" name="" event="_ZJ5G7e5XEeitL-zKjjNp2A" port="_5rHTPO5TEeitL-zKjjNp2A"/>
          </transition>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_5rH6Qu5TEeitL-zKjjNp2A" name="handleReceivedMessageDefault" specification="_5rH6Ru5TEeitL-zKjjNp2A">
        <language>C++</language>
        <body>	&#xD;
	if(str.empty())&#xD;
	{&#xD;
		return;&#xD;
	}&#xD;
	// First check for some special HTTP requests&#xD;
	if (str.rfind(&quot;GET /getPorts&quot;, 0) == 0) {&#xD;
		std::string strResult = getPorts();&#xD;
		conn->replyHTTPStatus(ITCPConnection::Status::OK, strResult);&#xD;
		return;&#xD;
	}&#xD;
&#xD;
	// Everything else is handled as TCP requests&#xD;
	std::map&lt;std::string, std::string> mp;&#xD;
	RTJsonDecoding object(nullptr);&#xD;
	object.decodeJsonString(str, mp);&#xD;
	std::string cmd = mp.find(&quot;command&quot;)->second;&#xD;
	if (config.logToStdOut)&#xD;
		std::cout &lt;&lt; &quot;JSON command received: &quot; &lt;&lt; cmd &lt;&lt; std::endl;&#xD;
&#xD;
	if (cmd == &quot;sendEvent&quot; || cmd == &quot;invokeEvent&quot;) {&#xD;
		std::string portName =  mp.find(&quot;port&quot;)->second;&#xD;
&#xD;
		// Find a matching port in this capule&#xD;
		const RTActor_class* actorData = getActorData();&#xD;
&#xD;
		RTProtocol* foundPort = 0;&#xD;
		const RTPortDescriptor* foundPortDescriptor = 0;&#xD;
		const RTPortDescriptor* portDescriptor = actorData->ports;&#xD;
		for (int i = actorData->numPorts; --i >= 0 &amp;&amp; !foundPortDescriptor; ++portDescriptor ) {&#xD;
			RTProtocol* port = RTObjectOf( RTProtocol, portDescriptor->offset, this );&#xD;
			if (portName == port->getName()) {&#xD;
				foundPortDescriptor = portDescriptor;&#xD;
				foundPort = port;&#xD;
			}&#xD;
		}&#xD;
&#xD;
		if (!foundPortDescriptor || !foundPort) {&#xD;
			conn->replyStatus(ITCPConnection::Status::Error, &quot;Failed to find port: &quot; + portName);&#xD;
			return;&#xD;
		}&#xD;
&#xD;
		const RTProtocolDescriptor* protocolDescriptor = foundPortDescriptor->protocol;&#xD;
		const RTProtocolDescriptor* protocolDescriptorConjugate = protocolDescriptor->conjugate;&#xD;
&#xD;
		// Find a matching out event in the port protocol&#xD;
		std::string eventName =  mp.find(&quot;event&quot;)->second;&#xD;
&#xD;
		const RTSignalDescriptor* foundSignalDescriptor = 0;&#xD;
	    const RTSignalDescriptor* signalDescriptor = protocolDescriptorConjugate->inSignals;&#xD;
	    for (int sigCount  = protocolDescriptorConjugate->numInSignals; --sigCount >= 0 &amp;&amp; !foundSignalDescriptor; ++signalDescriptor ) {&#xD;
	    	if (eventName == signalDescriptor->name) {&#xD;
	    		foundSignalDescriptor = signalDescriptor;&#xD;
	    	}&#xD;
	    }&#xD;
&#xD;
	    bool incomingEvent = false;&#xD;
	    if (!foundSignalDescriptor) {&#xD;
			// No out event found. Check if the &quot;incomingEvent&quot; flag is set. In that case the event is &quot;incoming&quot; and should be handled by&#xD;
			// the TCPServer or the capsule that inherits from it, rather than being sent out to another capsule.&#xD;
	    	std::string incomingEventString =  mp.find(&quot;incomingEvent&quot;)->second;&#xD;
			if (!incomingEventString.empty()) {&#xD;
				// Doesn't matter what this attribute is set to&#xD;
				incomingEvent = true;&#xD;
				const RTSignalDescriptor* signalDescriptor = protocolDescriptor->inSignals;&#xD;
				for (int sigCount = protocolDescriptor->numInSignals; --sigCount >= 0 &amp;&amp; !foundSignalDescriptor; ++signalDescriptor) {&#xD;
					if (eventName == signalDescriptor->name) {&#xD;
						foundSignalDescriptor = signalDescriptor;&#xD;
					}&#xD;
				}&#xD;
			}&#xD;
		}&#xD;
	    &#xD;
	    if (!foundSignalDescriptor) {&#xD;
			conn->replyStatus(ITCPConnection::Status::Error, &quot;Failed to find event: &quot; + eventName);&#xD;
			return;&#xD;
	    }&#xD;
&#xD;
	    std::string dataString =  mp.find(&quot;data&quot;)->second;&#xD;
	    void* data = 0;&#xD;
		const RTObject_class* dataType = 0;&#xD;
	    if (foundSignalDescriptor->type != &amp;RTType_void &amp;&amp; !dataString.empty()) {&#xD;
	    	// The signal expects data and we have data. Decode the data from ASCII format.	    		    		   &#xD;
	    	RTMemoryInBuffer source (dataString.c_str(), dataString.size());&#xD;
	    	RTAsciiDecoding decoder(&amp;source);&#xD;
			&#xD;
	    	/*&#xD;
	    	Var var_type = object->get(&quot;type&quot;);&#xD;
			if (var_type.isEmpty()) {&#xD;
				conn->replyStatus(ITCPConnection::Status::Error, &quot;Type of event data must be specified.&quot;);&#xD;
				return;&#xD;
			}					&#xD;
	    	&#xD;
	    	RTJsonDecoding decoder(dataString, var_type.convert&lt;string>());&#xD;
	    	*/&#xD;
			if (decoder.get(&amp;data, &amp;dataType) == 0) {&#xD;
				conn->replyStatus(ITCPConnection::Status::Error, &quot;Failed to decode data: &quot; + dataString);&#xD;
				return;&#xD;
			}&#xD;
			&#xD;
			if (dataType == &amp;RTType_RTUnknownObject) {&#xD;
				conn->replyStatus(ITCPConnection::Status::Error, &quot;Failed to decode data (it has an unknown type): &quot; + dataString);&#xD;
				return;&#xD;
			}&#xD;
&#xD;
			// TODO: Check so that dataType is compatible with foundSignalDescriptor->type&#xD;
	    	//foundSignalDescriptor->type->decode(data, &amp;decoder);&#xD;
	    }&#xD;
&#xD;
	    // Is a port index specified?&#xD;
	    int portIndex = -1;&#xD;
		std::string portIndexString =  mp.find(&quot;portIndex&quot;)->second;&#xD;
		if (!portIndexString.empty()) {&#xD;
			portIndex = stoi(portIndexString);&#xD;
		}&#xD;
	    if (cmd == &quot;sendEvent&quot;) {	    &#xD;
	    	std::string priorityString =  mp.find(&quot;priority&quot;)->second;&#xD;
	    	std::string str_priority = &quot;General&quot;;&#xD;
	    	if (!priorityString.empty())&#xD;
	    		str_priority = priorityString;&#xD;
	    			&#xD;
	    	int priority = General; // Default&#xD;
	    	if (str_priority == &quot;Panic&quot;)&#xD;
	    		priority = Panic;&#xD;
	    	else if (str_priority == &quot;High&quot;)&#xD;
	    		priority = High;&#xD;
	    	else if (str_priority == &quot;Low&quot;)&#xD;
	    		priority = Low;&#xD;
	    	else if (str_priority == &quot;Background&quot;)&#xD;
	    		priority = Background;&#xD;
	    	&#xD;
	    	if (incomingEvent) {&#xD;
	    		// Special case: Send as an incoming event on a port&#xD;
	    		RTMessage * msg = context()->newMsg();&#xD;
&#xD;
				if( msg == (RTMessage *)0 )&#xD;
				{&#xD;
					conn->replyStatus(ITCPConnection::Status::Error, &quot;Out of memory when attempting to inject incoming event &quot; + eventName);&#xD;
					context()->setError(RTController::noMem, RTController::SystemService, (const void *)0, (const void *)0 );&#xD;
					return;&#xD;
				}&#xD;
&#xD;
				msg->setData(data, foundSignalDescriptor->type);&#xD;
				msg->setSignal(foundSignalDescriptor->value);&#xD;
				msg->setPriority(priority);&#xD;
				msg->setDestination(this, foundPort, portIndex > 0 ? portIndex : 0);&#xD;
				msg->internData();&#xD;
&#xD;
				context()->receive(msg, context());&#xD;
&#xD;
	    	}&#xD;
	    	else {&#xD;
	    		// Normal case: Send as an outgoing event on a port&#xD;
				int result = (portIndex == -1) ?&#xD;
						foundPort->send(foundSignalDescriptor->value, data, foundSignalDescriptor->type, priority) :&#xD;
						foundPort->sendAt(portIndex, foundSignalDescriptor->value, data, foundSignalDescriptor->type, priority);&#xD;
				if (result == 0) {&#xD;
					// Failed to send&#xD;
					conn->replyStatus(ITCPConnection::Status::Error, context()->strerror());&#xD;
					return;&#xD;
				}&#xD;
	    	}&#xD;
	    	&#xD;
			conn->replyStatus(ITCPConnection::Status::OK, &quot;Command sendEvent succeeded!&quot;);&#xD;
	    }&#xD;
	    else if (cmd == &quot;invokeEvent&quot;) {&#xD;
	    	RTMessage* replies = new RTMessage[foundPort->size()];&#xD;
	    	int result = (portIndex == -1) ?&#xD;
					foundPort->invoke(replies, foundSignalDescriptor->value, data, foundSignalDescriptor->type, true /* implicitReply */) :&#xD;
					foundPort->invokeAt(portIndex, replies, foundSignalDescriptor->value, data, foundSignalDescriptor->type, true /* implicitReply */);&#xD;
			if (result == 0) {&#xD;
				// Failed to invoke&#xD;
				conn->replyStatus(ITCPConnection::Status::Error, context()->strerror());&#xD;
				delete[] replies;&#xD;
				return;&#xD;
			}   &#xD;
			&#xD;
			std::string strResult = &quot;[&quot;;&#xD;
			for (int i = 0; i &lt; result /* number of replies */; i++) {&#xD;
				if (i > 0)&#xD;
					strResult.append(&quot;, &quot;);&#xD;
				if (!replies[i].isValid()) {&#xD;
					// Invalid reply.&#xD;
					strResult.append(&quot;{\&quot;isValid\&quot; : false}&quot;);&#xD;
					continue;&#xD;
				}&#xD;
				RTDynamicStringOutBuffer buf;			&#xD;
				//RTJsonEncoding coding(&amp;buf);&#xD;
				//coding.put_msg(&amp;replies[i]);&#xD;
				strResult.append(&quot;{ \&quot;event\&quot; : \&quot;&quot;);&#xD;
				strResult.append(replies[i].getSignalName());&#xD;
				strResult.append(&quot;\&quot; &quot;);&#xD;
				&#xD;
				const RTObject_class * replyType = replies[i].getType();&#xD;
				const void* replyData = replies[i].getData();&#xD;
&#xD;
				if (replyType != 0) {&#xD;
					strResult.append(&quot;, \&quot;type\&quot; : \&quot;&quot;);&#xD;
					strResult.append(replyType->name());&#xD;
					strResult.append(&quot;\&quot; &quot;);&#xD;
				}&#xD;
				if (replyData != 0) {&#xD;
					RTDynamicStringOutBuffer buf;		&#xD;
					RTAsciiEncoding coding(&amp;buf);&#xD;
					coding.put(replyData, replyType);	&#xD;
					strResult.append(&quot;, \&quot;data\&quot; : &quot;);&#xD;
					std::string data(buf.getString());&#xD;
					strResult.append(data);&#xD;
					strResult.append(&quot; &quot;);&#xD;
				}					&#xD;
				strResult.append(&quot;}&quot;);&#xD;
			}&#xD;
			strResult.append(&quot;]&quot;);&#xD;
			delete[] replies;&#xD;
			&#xD;
			conn->replyStatus(ITCPConnection::Status::OK, &quot;Command invokeEvent succeeded!&quot;, strResult);&#xD;
	    }&#xD;
&#xD;
		if (dataType != 0) {&#xD;
			// The data was copied when sending or invoking the event, so now we must destroy it&#xD;
			dataType->destroy(data, RTObject_class::DestroyAndDeallocate);&#xD;
		}			&#xD;
	}&#xD;
	else if (cmd == &quot;getPorts&quot;) {&#xD;
		// Get all ports of this capule		&#xD;
		std::string strResult = getPorts();&#xD;
		conn->replyStatus(ITCPConnection::Status::OK, &quot;Command getPorts succeeded!&quot;, strResult);&#xD;
	}&#xD;
	else {&#xD;
		// Unknown command&#xD;
		conn->replyStatus(ITCPConnection::Status::Error, &quot;Unknown command: &quot; + cmd);	&#xD;
	}</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_29hpUPF5EeiGPObbQ5S9rA" name="unexpectedMessage" specification="_j8WecPF5EeiGPObbQ5S9rA">
        <language>C++</language>
        <body>// Called when an outgoing message arrives at the TCPServer capsule part.&#xD;
// JSON encode it and send the encoding to the specified remote host.&#xD;
if (config.remoteHost.empty() || config.remotePort == 0)&#xD;
	return; // Sending of outgoing messages is disabled&#xD;
&#xD;
const RTMessage* msg = getMsg();&#xD;
	&#xD;
//RTJsonEncoding coding(&amp;buf);&#xD;
//coding.put_msg(msg);&#xD;
//string str(buf.getString(), RTMemoryUtil::strlen(buf.getString()) - 1);&#xD;
&#xD;
std::string str = &quot;{ \&quot;event\&quot; : \&quot;&quot;;&#xD;
str.append(msg->getSignalName());&#xD;
str.append(&quot;\&quot; &quot;);&#xD;
&#xD;
const RTObject_class * type = msg->getType();&#xD;
const void* data = msg->getData();&#xD;
&#xD;
if (type != 0) {&#xD;
	str.append(&quot;, \&quot;type\&quot; : \&quot;&quot;);&#xD;
	str.append(type->name());&#xD;
	str.append(&quot;\&quot; &quot;);&#xD;
}&#xD;
if (data != 0) {&#xD;
	RTDynamicStringOutBuffer buf;		&#xD;
	RTAsciiEncoding coding(&amp;buf);&#xD;
	coding.put(data, type);	&#xD;
	str.append(&quot;, \&quot;data\&quot; : &quot;);&#xD;
	str.append(buf.getString());&#xD;
}&#xD;
&#xD;
// Make the JSON format identical to 'sendEvent' or 'invokeEvent' objects for incoming events&#xD;
// so it becomes possible to build a distributed RTist application where one&#xD;
// executable can consume the output of another executable.&#xD;
str.append(&quot;, \&quot;command\&quot; : \&quot;&quot;);&#xD;
if (msg->priority == System) {&#xD;
	// Invoked event&#xD;
	str.append(&quot;invokeEvent\&quot;&quot;);&#xD;
}&#xD;
else {&#xD;
	// Sent event&#xD;
	std::string priority = &quot;General&quot;;&#xD;
	if (msg->priority == Panic)&#xD;
		priority = &quot;Panic&quot;;&#xD;
	else if (msg->priority == High)&#xD;
		priority = &quot;High&quot;;&#xD;
	else if (msg->priority == Low)&#xD;
		priority = &quot;Low&quot;;&#xD;
	else if (msg->priority == Background)&#xD;
		priority = &quot;Background&quot;;&#xD;
&#xD;
	str.append(&quot;sendEvent\&quot;, \&quot;priority\&quot; : \&quot;&quot;);&#xD;
	str.append(priority);&#xD;
	str.append(&quot;\&quot;&quot;);&#xD;
}&#xD;
&#xD;
// Append port and portIndex&#xD;
RTProtocol * port = msg->sap();&#xD;
if( port != 0 &amp;&amp; port->getName() != 0) {&#xD;
	str.append(&quot;, \&quot;port\&quot; : \&quot;&quot;);&#xD;
	str.append(port->getName());&#xD;
	str.append(&quot;\&quot;, \&quot;portIndex\&quot; : &quot;);&#xD;
	str.append(std::to_string(msg->sapIndex0()));&#xD;
}&#xD;
str.append(&quot;}&quot;);&#xD;
&#xD;
if (config.logToStdOut)&#xD;
	std::cout &lt;&lt; &quot;Out message: &quot; &lt;&lt; str &lt;&lt; std::endl;&#xD;
&#xD;
	bool writeSuccess = false;&#xD;
&#xD;
	RTTcpSocket tcp;&#xD;
	RTIOMonitor *ioM = new RTIOMonitor();&#xD;
	tcp.registerWith(ioM);&#xD;
	tcp.create();&#xD;
	tcp.connect(static_cast&lt;const char*>(config.remoteHost.c_str()), static_cast&lt;int>(config.remotePort));&#xD;
	tcp.write(static_cast&lt;const char*>(str.c_str()), static_cast&lt;int>(str.length()));&#xD;
	writeSuccess = true;&#xD;
&#xD;
&#xD;
	static const RTTimespec awhile( 1L, 0L );&#xD;
	while(!ioM->wait( &amp;awhile)) {&#xD;
		std::this_thread::sleep_for(std::chrono::seconds(1));&#xD;
	}&#xD;
&#xD;
	// Read response, if any&#xD;
	char buffer[1024] = {0};&#xD;
	int n;&#xD;
	std::string received;&#xD;
&#xD;
	do {&#xD;
		RTMemoryUtil::memset(buffer, 0, sizeof(buffer));&#xD;
		n = tcp.read(buffer, 1024);&#xD;
		if (n > 0)&#xD;
			received.append(buffer, n);&#xD;
	}while (n > 0);&#xD;
&#xD;
	tcp.close();&#xD;
&#xD;
	if (config.logToStdOut)&#xD;
		std::cout &lt;&lt; &quot;Response for out message: &quot; &lt;&lt; received &lt;&lt; std::endl;&#xD;
	handleResponseForOutMessage(received);&#xD;
&#xD;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_mO8X4PGUEeiGPObbQ5S9rA" name="init" specification="_dbgzYPGUEeiGPObbQ5S9rA">
        <language>C++</language>
        <body>// Override to set custom values of configuration properties </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_YPc3cHxrEemQvv1wPLSA6g" name="handleResponseForOutMessage" specification="_YPbpUHxrEemQvv1wPLSA6g">
        <language>C++</language>
        <body>	if(response.empty()) {&#xD;
		return;&#xD;
	}&#xD;
	std::map&lt;std::string, std::string> mp;&#xD;
	RTJsonDecoding object(nullptr);&#xD;
	object.decodeJsonString(response, mp);&#xD;
&#xD;
	auto a =  mp.find(&quot;command&quot;);&#xD;
&#xD;
	if (a == mp.end()) {&#xD;
		return; // No command provided - skip it&#xD;
	}&#xD;
	std::string cmd = a->second;&#xD;
	if (config.logToStdOut)&#xD;
		std::cout &lt;&lt; &quot;Response contained JSON command: &quot; &lt;&lt; cmd &lt;&lt; std::endl;&#xD;
&#xD;
	if (cmd == &quot;reply&quot;) {&#xD;
		std::string portName =  mp.find(&quot;port&quot;)->second;&#xD;
		// Find a matching port in this capule&#xD;
		const RTActor_class* actorData = getActorData();&#xD;
&#xD;
		RTProtocol* foundPort = 0;&#xD;
		const RTPortDescriptor* foundPortDescriptor = 0;&#xD;
		const RTPortDescriptor* portDescriptor = actorData->ports;&#xD;
		for (int i = actorData->numPorts; --i >= 0 &amp;&amp; !foundPortDescriptor; ++portDescriptor ) {&#xD;
			RTProtocol* port = RTObjectOf( RTProtocol, portDescriptor->offset, this );&#xD;
			if (portName == port->getName()) {&#xD;
				foundPortDescriptor = portDescriptor;&#xD;
				foundPort = port;&#xD;
			}&#xD;
		}&#xD;
&#xD;
		if (!foundPortDescriptor || !foundPort) {&#xD;
			std::cerr &lt;&lt; &quot;ERROR: Failed to find port: &quot; &lt;&lt; portName &lt;&lt; std::endl;&#xD;
			return;&#xD;
		}&#xD;
&#xD;
		const RTProtocolDescriptor* protocolDescriptor = foundPortDescriptor->protocol;&#xD;
		const RTProtocolDescriptor* protocolDescriptorConjugate = protocolDescriptor->conjugate;&#xD;
&#xD;
		// Find a matching out event in the port protocol&#xD;
		std::string eventName =  mp.find(&quot;event&quot;)->second;&#xD;
		const RTSignalDescriptor* foundSignalDescriptor = 0;&#xD;
	    const RTSignalDescriptor* signalDescriptor = protocolDescriptorConjugate->inSignals;&#xD;
	    for (int sigCount  = protocolDescriptorConjugate->numInSignals; --sigCount >= 0 &amp;&amp; !foundSignalDescriptor; ++signalDescriptor ) {&#xD;
	    	if (eventName == signalDescriptor->name) {&#xD;
	    		foundSignalDescriptor = signalDescriptor;&#xD;
	    	}&#xD;
	    }&#xD;
&#xD;
	    if (!foundSignalDescriptor) {&#xD;
	    	std::cerr &lt;&lt; &quot;ERROR: Failed to find event: &quot; &lt;&lt; eventName &lt;&lt; std::endl;&#xD;
			return;&#xD;
	    }&#xD;
&#xD;
	    std::string dataString =  mp.find(&quot;data&quot;)->second;&#xD;
	    void* data = 0;&#xD;
		const RTObject_class* dataType = 0;&#xD;
	    if (foundSignalDescriptor->type != &amp;RTType_void &amp;&amp; !dataString.empty()) {&#xD;
	    	// The signal expects data and we have data. Decode the data from ASCII format.	    		    		   &#xD;
	    	RTMemoryInBuffer source (dataString.c_str(), dataString.size());&#xD;
	    	RTAsciiDecoding decoder(&amp;source);&#xD;
			&#xD;
	    	/*&#xD;
	    	Var var_type = object->get(&quot;type&quot;);&#xD;
			if (var_type.isEmpty()) {&#xD;
				conn->replyStatus(ITCPConnection::Status::Error, &quot;Type of event data must be specified.&quot;);&#xD;
				return;&#xD;
			}					&#xD;
	    	&#xD;
	    	RTJsonDecoding decoder(dataString, var_type.convert&lt;string>());&#xD;
	    	*/&#xD;
			if (decoder.get(&amp;data, &amp;dataType) == 0) {&#xD;
				std::cerr &lt;&lt; &quot;ERROR: Failed to decode data: &quot; &lt;&lt; dataString &lt;&lt; std::endl;&#xD;
				return;&#xD;
			}&#xD;
			&#xD;
			if (dataType == &amp;RTType_RTUnknownObject) {&#xD;
				std::cerr &lt;&lt; &quot;ERROR: Failed to decode data (it has an unknown type): &quot; &lt;&lt; dataString &lt;&lt; std::endl;&#xD;
				return;&#xD;
			}&#xD;
&#xD;
			// TODO: Check so that dataType is compatible with foundSignalDescriptor->type&#xD;
&#xD;
	    	//foundSignalDescriptor->type->decode(data, &amp;decoder);&#xD;
	    }&#xD;
	    &#xD;
	    // We are now ready to perform the reply&#xD;
	    int result = foundPort->reply(foundSignalDescriptor->value, data, foundSignalDescriptor->type);		&#xD;
		if (result == 0) {&#xD;
			// Failed to reply&#xD;
			std::cerr &lt;&lt; &quot;ERROR: &quot; &lt;&lt; context()->strerror() &lt;&lt; std::endl;&#xD;
			return;&#xD;
		}   &#xD;
		&#xD;
		if (dataType != 0) {&#xD;
			// The data was copied when replying the event, so now we must destroy it&#xD;
			dataType->destroy(data, RTObject_class::DestroyAndDeallocate);&#xD;
		}			&#xD;
	}	&#xD;
	else {&#xD;
		// Unknown command&#xD;
		std::cerr &lt;&lt; &quot;ERROR: Unknown command: &quot; &lt;&lt; cmd &lt;&lt; std::endl;&#xD;
	}&#xD;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CDT-MLqtEem5vPW57wwiFQ" name="getPorts" specification="_rvlgsLnsEem5vPW57wwiFQ">
        <language>C++</language>
        <body>		const RTActor_class* actorData = getActorData();&#xD;
		const RTPortDescriptor* portDescriptor = actorData->ports;&#xD;
		std::string strResult = &quot;[&quot;;&#xD;
		bool firstPort = true;&#xD;
		for (int i = actorData->numPorts; --i >= 0; ++portDescriptor ) {&#xD;
			RTProtocol* port = RTObjectOf( RTProtocol, portDescriptor->offset, this );&#xD;
			if (port->getName() == &quot;external&quot; &amp;&amp; port->getInfo()->protocol->name == &quot;External&quot;)&#xD;
				continue; // Skip the 'external' port of the TCPServer capsule since it's only for internal use&#xD;
&#xD;
			if (!firstPort)&#xD;
				strResult.append(&quot;, &quot;);&#xD;
			firstPort = false;&#xD;
&#xD;
			strResult.append(&quot;{ \&quot;name\&quot; : \&quot;&quot;);&#xD;
			strResult.append(port->getName());&#xD;
			strResult.append(&quot;\&quot;, \&quot;events\&quot; : [&quot;);&#xD;
&#xD;
			// Get all out events of the port's protocol&#xD;
			const RTProtocolDescriptor* protocolDescriptor = portDescriptor->protocol;&#xD;
			const RTProtocolDescriptor* protocolDescriptorConjugate = protocolDescriptor->conjugate;&#xD;
&#xD;
			const RTSignalDescriptor* signalDescriptor = protocolDescriptorConjugate->inSignals;&#xD;
			bool firstEvent = true;&#xD;
			for (int sigCount = protocolDescriptorConjugate->numInSignals; --sigCount >= 0; ++signalDescriptor ) {&#xD;
				if (!signalDescriptor->type)&#xD;
					continue; // Skip TargetRTS internal events such as rtBound and rtUnbound&#xD;
&#xD;
				if (!firstEvent)&#xD;
					strResult.append(&quot;, &quot;);&#xD;
				firstEvent = false;&#xD;
&#xD;
				strResult.append(&quot;\&quot;&quot;);&#xD;
				strResult.append(signalDescriptor->name);&#xD;
				strResult.append(&quot;\&quot;&quot;);&#xD;
			}&#xD;
&#xD;
			strResult.append(&quot;] }&quot;);&#xD;
&#xD;
		}&#xD;
		strResult.append(&quot;]&quot;);&#xD;
		return strResult;&#xD;
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="__B-J4APqEe6qu-UReG4eQA" name="onRequestReceived" specification="_5rH6Q-5TEeitL-zKjjNp2A">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="__CPPoAPqEe6qu-UReG4eQA" name="handleReceivedMessageCustom" specification="_5rH6Se5TEeitL-zKjjNp2A">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedOperation xmi:id="_5rH6Q-5TEeitL-zKjjNp2A" name="onRequestReceived" method="__B-J4APqEe6qu-UReG4eQA">
        <ownedParameter xmi:id="_5rH6RO5TEeitL-zKjjNp2A" name="return" direction="return">
          <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_f0877hKyEdyaM9S2zG4bgA?CppPrimitiveDatatypes/void?"/>
        </ownedParameter>
        <ownedParameter xmi:id="_5rH6Re5TEeitL-zKjjNp2A" name="str"/>
      </ownedOperation>
      <ownedOperation xmi:id="_5rH6Ru5TEeitL-zKjjNp2A" name="handleReceivedMessageDefault" visibility="private" method="_5rH6Qu5TEeitL-zKjjNp2A">
        <ownedParameter xmi:id="_5rH6R-5TEeitL-zKjjNp2A" name="str"/>
        <ownedParameter xmi:id="_5rH6SO5TEeitL-zKjjNp2A" name="conn" type="_Vq7iIO5WEeitL-zKjjNp2A"/>
        <ownedParameter xmi:id="_8QsRgO5XEeitL-zKjjNp2A" name="return" direction="return">
          <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_f0877hKyEdyaM9S2zG4bgA?CppPrimitiveDatatypes/void?"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_5rH6Se5TEeitL-zKjjNp2A" name="handleReceivedMessageCustom" visibility="protected" method="__CPPoAPqEe6qu-UReG4eQA">
        <ownedParameter xmi:id="_5rH6Su5TEeitL-zKjjNp2A" name="str"/>
        <ownedParameter xmi:id="_5rH6S-5TEeitL-zKjjNp2A" name="conn" type="_Vq7iIO5WEeitL-zKjjNp2A"/>
        <ownedParameter xmi:id="_7tKtsO5XEeitL-zKjjNp2A" name="return" direction="return">
          <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_f0877hKyEdyaM9S2zG4bgA?CppPrimitiveDatatypes/void?"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_j8WecPF5EeiGPObbQ5S9rA" name="unexpectedMessage" method="_29hpUPF5EeiGPObbQ5S9rA">
        <ownedParameter xmi:id="_8U5WYPIYEeiGPObbQ5S9rA" name="return" direction="return">
          <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_f0877hKyEdyaM9S2zG4bgA?CppPrimitiveDatatypes/void?"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_dbgzYPGUEeiGPObbQ5S9rA" name="init" method="_mO8X4PGUEeiGPObbQ5S9rA">
        <ownedParameter xmi:id="_-HlcAPIYEeiGPObbQ5S9rA" name="return" direction="return">
          <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_f0877hKyEdyaM9S2zG4bgA?CppPrimitiveDatatypes/void?"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_YPbpUHxrEemQvv1wPLSA6g" name="handleResponseForOutMessage" visibility="private" method="_YPc3cHxrEemQvv1wPLSA6g">
        <ownedParameter xmi:id="_YPbpUXxrEemQvv1wPLSA6g" name="response"/>
        <ownedParameter xmi:id="_YPbpU3xrEemQvv1wPLSA6g" name="return" direction="return">
          <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_f0877hKyEdyaM9S2zG4bgA?CppPrimitiveDatatypes/void?"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_rvlgsLnsEem5vPW57wwiFQ" name="getPorts" method="_CDT-MLqtEem5vPW57wwiFQ">
        <ownedParameter xmi:id="_ETGPgLqtEem5vPW57wwiFQ" name="return" direction="return"/>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_5rKWgO5TEeitL-zKjjNp2A" name="TCPServer_Config">
      <ownedAttribute xmi:id="_5rKWhe5TEeitL-zKjjNp2A" name="port" visibility="public" isStatic="true">
        <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_b5qeIMuSEdy4n9Rh8xcU5g?CppPrimitiveDatatypes/unsigned%20int?"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_5rKWhu5TEeitL-zKjjNp2A" value="9911">
          <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_b5qeIMuSEdy4n9Rh8xcU5g?CppPrimitiveDatatypes/unsigned%20int?"/>
        </defaultValue>
      </ownedAttribute>
      <ownedAttribute xmi:id="_5rKWh-5TEeitL-zKjjNp2A" name="defaultHandlingOfReceivedMessages" visibility="public" isStatic="true">
        <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_f0875RKyEdyaM9S2zG4bgA?CppPrimitiveDatatypes/bool?"/>
        <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_5rKWiO5TEeitL-zKjjNp2A" value="true">
          <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_f0875RKyEdyaM9S2zG4bgA?CppPrimitiveDatatypes/bool?"/>
        </defaultValue>
      </ownedAttribute>
      <ownedAttribute xmi:id="_G4md0O54EeitL-zKjjNp2A" name="maxWaitForReply" visibility="public" isStatic="true">
        <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_b5qeIMuSEdy4n9Rh8xcU5g?CppPrimitiveDatatypes/unsigned%20int?"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_KxOVMO54EeitL-zKjjNp2A" value="5000">
          <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_b5qeIMuSEdy4n9Rh8xcU5g?CppPrimitiveDatatypes/unsigned%20int?"/>
        </defaultValue>
      </ownedAttribute>
      <ownedAttribute xmi:id="_Nfwa8PGMEeiGPObbQ5S9rA" name="remotePort" visibility="public" isStatic="true">
        <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_b5qeIMuSEdy4n9Rh8xcU5g?CppPrimitiveDatatypes/unsigned%20int?"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_Nfwa8fGMEeiGPObbQ5S9rA" value="2234">
          <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_b5qeIMuSEdy4n9Rh8xcU5g?CppPrimitiveDatatypes/unsigned%20int?"/>
        </defaultValue>
      </ownedAttribute>
      <ownedAttribute xmi:id="_btFcUPGMEeiGPObbQ5S9rA" name="remoteHost" visibility="public" isStatic="true">
        <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_nQigwPOiEeiMwvLnGvgCsg" name="">
          <language>C++</language>
          <body>&quot;127.0.0.1&quot;</body>
        </defaultValue>
      </ownedAttribute>
      <ownedAttribute xmi:id="_B1wdwM8OEemd-cvOi0spQQ" name="logToStdOut" visibility="public" isStatic="true">
        <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_f0875RKyEdyaM9S2zG4bgA?CppPrimitiveDatatypes/bool?"/>
        <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_B1wdwc8OEemd-cvOi0spQQ" value="true">
          <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_f0875RKyEdyaM9S2zG4bgA?CppPrimitiveDatatypes/bool?"/>
        </defaultValue>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_5rLkoO5TEeitL-zKjjNp2A" memberEnd="_5rHTN-5TEeitL-zKjjNp2A _5rLkoe5TEeitL-zKjjNp2A">
      <ownedEnd xmi:id="_5rLkoe5TEeitL-zKjjNp2A" name="" visibility="private" type="_5rHTMO5TEeitL-zKjjNp2A" association="_5rLkoO5TEeitL-zKjjNp2A">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_5rLkou5TEeitL-zKjjNp2A" value="1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_5rLko-5TEeitL-zKjjNp2A" value="1"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="_Vq7iIO5WEeitL-zKjjNp2A" name="ITCPConnection">
      <ownedOperation xmi:id="_Vq7iIe5WEeitL-zKjjNp2A" name="reply">
        <ownedParameter xmi:id="_Vq7iIu5WEeitL-zKjjNp2A" name="msg"/>
        <ownedParameter xmi:id="_Bc4CgO5YEeitL-zKjjNp2A" name="return" direction="return">
          <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_f0877hKyEdyaM9S2zG4bgA?CppPrimitiveDatatypes/void?"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_UPAbEO50EeitL-zKjjNp2A" name="replyStatus">
        <ownedParameter xmi:id="_eGuuIO50EeitL-zKjjNp2A" name="status" type="_aqjiMO50EeitL-zKjjNp2A"/>
        <ownedParameter xmi:id="_UPAbEe50EeitL-zKjjNp2A" name="msg"/>
        <ownedParameter xmi:id="_9Yy44PFTEeiGPObbQ5S9rA" name="result"/>
        <ownedParameter xmi:id="_UPAbEu50EeitL-zKjjNp2A" name="return" direction="return">
          <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_f0877hKyEdyaM9S2zG4bgA?CppPrimitiveDatatypes/void?"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_sj470PFUEeiGPObbQ5S9rA" name="replyStatus">
        <ownedParameter xmi:id="_sj470fFUEeiGPObbQ5S9rA" name="status" type="_aqjiMO50EeitL-zKjjNp2A"/>
        <ownedParameter xmi:id="_sj470vFUEeiGPObbQ5S9rA" name="msg"/>
        <ownedParameter xmi:id="_sj471PFUEeiGPObbQ5S9rA" name="return" direction="return">
          <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_f0877hKyEdyaM9S2zG4bgA?CppPrimitiveDatatypes/void?"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_8MtMsMr-Eemd-cvOi0spQQ" name="replyHTTPStatus">
        <ownedParameter xmi:id="_8MtMscr-Eemd-cvOi0spQQ" name="status" type="_aqjiMO50EeitL-zKjjNp2A"/>
        <ownedParameter xmi:id="_8MtMssr-Eemd-cvOi0spQQ" name="msg"/>
        <ownedParameter xmi:id="_8MtMs8r-Eemd-cvOi0spQQ" name="return" direction="return">
          <type xmi:type="uml:PrimitiveType" href="platform:/plugin/com.ibm.xtools.umldt.rt.cpp.core/libraries/CppPrimitiveDatatypes.emx#_f0877hKyEdyaM9S2zG4bgA?CppPrimitiveDatatypes/void?"/>
        </ownedParameter>
      </ownedOperation>
      <nestedClassifier xmi:type="uml:Enumeration" xmi:id="_aqjiMO50EeitL-zKjjNp2A" name="Status">
        <ownedLiteral xmi:id="_gPffgO52EeitL-zKjjNp2A" name="OK" classifier="_aqjiMO50EeitL-zKjjNp2A"/>
        <ownedLiteral xmi:id="_cUJ9QO50EeitL-zKjjNp2A" name="Error" classifier="_aqjiMO50EeitL-zKjjNp2A"/>
      </nestedClassifier>
    </packagedElement>
    <packagedElement xmi:type="uml:Dependency" xmi:id="_RtbVUO5XEeitL-zKjjNp2A" name="" supplier="_Vq7iIO5WEeitL-zKjjNp2A" client="_5rHTMO5TEeitL-zKjjNp2A"/>
    <packagedElement xmi:type="uml:Package" xmi:id="_ZJ5G4O5XEeitL-zKjjNp2A" name="TCPServerControl">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_ZJ5G4e5XEeitL-zKjjNp2A" name="TCPServerControl" clientDependency="_ZJ5G4u5XEeitL-zKjjNp2A _ZJ5G6-5XEeitL-zKjjNp2A">
        <interfaceRealization xmi:id="_ZJ5G4u5XEeitL-zKjjNp2A" name="" supplier="_ZJ5G4-5XEeitL-zKjjNp2A" client="_ZJ5G4e5XEeitL-zKjjNp2A" contract="_ZJ5G4-5XEeitL-zKjjNp2A"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_ZJ5G4-5XEeitL-zKjjNp2A" name="TCPServerControl">
        <eAnnotations xmi:id="_ZJ5G5O5XEeitL-zKjjNp2A" source="http://www.eclipse.org/uml2/2.0.0/UML">
          <details xmi:id="_ZJ5G5e5XEeitL-zKjjNp2A" key="ProtocolRole"/>
        </eAnnotations>
        <ownedOperation xmi:id="_ZJ5G5u5XEeitL-zKjjNp2A" name="stop"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_ZJ5G6O5XEeitL-zKjjNp2A" name="TCPServerControl~">
        <eAnnotations xmi:id="_ZJ5G6e5XEeitL-zKjjNp2A" source="http://www.eclipse.org/uml2/2.0.0/UML">
          <details xmi:id="_ZJ5G6u5XEeitL-zKjjNp2A" key="ProtocolRole"/>
        </eAnnotations>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_ZJ5G6-5XEeitL-zKjjNp2A" supplier="_ZJ5G6O5XEeitL-zKjjNp2A" client="_ZJ5G4e5XEeitL-zKjjNp2A"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_ZJ5G7O5XEeitL-zKjjNp2A" name="*"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_ZJ5G7e5XEeitL-zKjjNp2A" operation="_ZJ5G5u5XEeitL-zKjjNp2A">
        <name xsi:nil="true"/>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Artifact" xmi:id="_t7DdAPJaEeiUbIS8Ru5zVw" name="RTJsonDecoding"/>
    <packagedElement xmi:type="uml:Dependency" xmi:id="_ZmbWsPLdEeiUbIS8Ru5zVw" name="" supplier="_t7DdAPJaEeiUbIS8Ru5zVw" client="_5rHTMO5TEeitL-zKjjNp2A"/>
    <profileApplication xmi:id="_n2Oxzu5SEeitL-zKjjNp2A">
      <eAnnotations xmi:id="_n2Oxz-5SEeitL-zKjjNp2A" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="pathmap://UML_PROFILES/Standard.profile.uml#_yzU58YinEdqtvbnfB2L_5w"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_PROFILES/Standard.profile.uml#_0"/>
    </profileApplication>
    <profileApplication xmi:id="_n2Ox0O5SEeitL-zKjjNp2A">
      <eAnnotations xmi:id="_n2Ox0e5SEeitL-zKjjNp2A" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="pathmap://UML2_MSL_PROFILES/Default.epx#_fNwoAAqoEd6-N_NOT9vsCA?Default/Default?"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML2_MSL_PROFILES/Default.epx#_a_S3wNWLEdiy4IqP8whjFA?Default?"/>
    </profileApplication>
    <profileApplication xmi:id="_n2Ox0u5SEeitL-zKjjNp2A">
      <eAnnotations xmi:id="_n2Ox0-5SEeitL-zKjjNp2A" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="pathmap://UML2_MSL_PROFILES/Deployment.epx#_4OVBUD0TEeKt-L0gyEptgQ?Deployment/Deployment?"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML2_MSL_PROFILES/Deployment.epx#_vjbuwOvHEdiDX5bji0iVSA?Deployment?"/>
    </profileApplication>
    <profileApplication xmi:id="_n2Ox1O5SEeitL-zKjjNp2A">
      <eAnnotations xmi:id="_n2Ox1e5SEeitL-zKjjNp2A" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="pathmap://CPP_LANGUAGE_PROFILE/CppPropertySets.epx#_5TYAwMk4EeO2m9WtkWjeeQ?CppPropertySets/CppPropertySets?"/>
      </eAnnotations>
      <appliedProfile href="pathmap://CPP_LANGUAGE_PROFILE/CppPropertySets.epx#_TNvRgL3gEduxAOGdMW1qJA?CppPropertySets?"/>
    </profileApplication>
    <profileApplication xmi:id="_n2PY0e5SEeitL-zKjjNp2A">
      <eAnnotations xmi:id="_n2P_4O5SEeitL-zKjjNp2A" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="pathmap://RT_PROPERTIES/UMLRealTime.epx#_3TUzoXq6Ed2hSeAAWZznoA?UMLRealTime/UMLRealTime?"/>
      </eAnnotations>
      <appliedProfile href="pathmap://RT_PROPERTIES/UMLRealTime.epx#_uTDwIRHVEdu19OChlR9tHg?UMLRealTime?"/>
    </profileApplication>
    <profileApplication xmi:id="_n2Qm8O5SEeitL-zKjjNp2A">
      <eAnnotations xmi:id="_n2Qm8e5SEeitL-zKjjNp2A" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="pathmap://RT_PROPERTIES/InteractionProfile.epx#_dDVwwX8wEd2ags_Lr77Vow?InteractionProfile/InteractionProfile?"/>
      </eAnnotations>
      <appliedProfile href="pathmap://RT_PROPERTIES/InteractionProfile.epx#_LyeQ4HnVEd2No7ra0rEeOg?InteractionProfile?"/>
    </profileApplication>
  </uml:Package>
  <Default:DefaultLanguage xmi:id="_n2PY0O5SEeitL-zKjjNp2A" base_Package="_n2OxwO5SEeitL-zKjjNp2A" defaultLanguage="C++"/>
  <UMLRealTime:Capsule xmi:id="_5rMywO5TEeitL-zKjjNp2A" base_Class="_5rHTMO5TEeitL-zKjjNp2A"/>
  <CppPropertySets:GeneralCapsuleProperties xmi:id="_5rMywe5TEeitL-zKjjNp2A" base_Class="_5rHTMO5TEeitL-zKjjNp2A">
    <headerPreface xmi:id="_5rMywu5TEeitL-zKjjNp2A" body="#include &lt;string>&#xD;&#xA;#include &quot;../src/include/RTIOMonitor.h&quot;&#xD;&#xA;#include &lt;RTTcpSocket.h>&#xD;&#xA;class RTIOMonitor;"/>
    <implementationPreface xmi:id="_5rMyw-5TEeitL-zKjjNp2A" body="&#xD;&#xA;#include &lt;iostream>&#xD;&#xA;#include &lt;sstream>&#xD;&#xA;#include &lt;chrono>&#xD;&#xA;#include &lt;thread>&#xD;&#xA;#include &lt;RTUnknownObject.h>&#xD;&#xA;#include &lt;RTDynamicStringOutBuffer.h>&#xD;&#xA;#include &lt;RTJsonEncoding.h>&#xD;&#xA;&#xD;&#xA;// Represents an active connection to the local TCP server&#xD;&#xA;class LocalServerConnection : public ITCPConnection&#xD;&#xA;{&#xD;&#xA;&#x9;TCPServer_Actor&amp; capsuleInst;&#xD;&#xA;&#x9;const std::string NL = &quot;\n&quot;;&#xD;&#xA;&#x9;std::string sendReply;&#xD;&#xA;&#x9;std::thread threadObj;&#xD;&#xA;&#x9;RTTcpSocket listenSock;&#xD;&#xA;&#x9;RTIOMonitor * ioMonitor;&#xD;&#xA;&#xD;&#xA;public:&#xD;&#xA;&#x9;LocalServerConnection(TCPServer_Actor&amp; context):&#xD;&#xA;&#x9;&#x9;capsuleInst(context)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;sendReply.clear();&#xD;&#xA;&#x9;&#x9;ioMonitor = new RTIOMonitor;&#xD;&#xA;&#x9;&#x9;listenSock.registerWith(ioMonitor);&#xD;&#xA;&#x9;&#x9;if (listenSock.create() &amp;&amp; listenSock.listen(capsuleInst.config.port)) {&#xD;&#xA;&#x9;&#x9;&#x9;std::cout &lt;&lt; &quot;listenSock created and set listen &quot; &lt;&lt;std::endl;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;else {&#xD;&#xA;&#x9;&#x9;&#x9;std::cout &lt;&lt; &quot;TCP ioMonitor failed &quot; &lt;&lt;std::endl;&#xD;&#xA;&#x9;&#x9;&#x9;listenSock.close();&#xD;&#xA;&#x9;&#x9;&#x9;ioMonitor = (RTIOMonitor *) 0;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;threadObj = std::thread(&amp;LocalServerConnection::runThread, this);&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;void runThread()&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;while(1) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;RTTcpSocket clientSock;&#xD;&#xA;&#x9;&#x9;&#x9;RTIOMonitor *ioMonitorClient = new RTIOMonitor;&#xD;&#xA;&#x9;&#x9;&#x9;clientSock.registerWith(ioMonitorClient);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;static const RTTimespec awhile( 5L, 0L );&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;while(!ioMonitor->wait( &amp;awhile))&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;std::this_thread::sleep_for(std::chrono::seconds(1));&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;clientSock.acceptFrom(listenSock);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;if (capsuleInst.config.logToStdOut)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;std::cout &lt;&lt; &quot;TCP request received &quot;&lt;&lt; std::endl;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;while(!ioMonitorClient->wait( &amp;awhile))&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;std::this_thread::sleep_for(std::chrono::seconds(1));&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;char buffer[1024] = {0};&#xD;&#xA;&#x9;&#x9;&#x9;int n;&#xD;&#xA;&#x9;&#x9;&#x9;std::string received;&#xD;&#xA;&#x9;&#x9;&#x9;do {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;RTMemoryUtil::memset(buffer, 0, sizeof(buffer));&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;n = clientSock.read( buffer, 1024);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (n > 0)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;received.append(buffer, n);&#xD;&#xA;&#x9;&#x9;&#x9;}while(n > 0);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;std::pair&lt;std::string, LocalServerConnection*>* data = new std::pair&lt;std::string, LocalServerConnection*>(received, this);&#xD;&#xA;&#x9;&#x9;&#x9;capsuleInst.external.dataPushBack(data);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;if (capsuleInst.external.raise() == 0) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;// The capsule is not ready to receive the external event. Wait a little and try 2 more times before giving up.&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;//std::this_thread::sleep_for(std::chrono::milliseconds(500));&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (capsuleInst.external.raise() == 0) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::this_thread::sleep_for(std::chrono::milliseconds(500));&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (capsuleInst.external.raise() == 0) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;replyStatus(Status::Error, &quot;Failed to notify TCPServer capsule about received message after 3 attempts. Message is lost!&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// Need to remove the data object since this LocalServerConnection soon will become invalid&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;capsuleInst.external.dataDelete(data);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;#ifdef _DEBUG&#xD;&#xA;&#x9;&#x9;&#x9;long sleepDuration = 1000000;&#xD;&#xA;#else&#xD;&#xA;&#x9;&#x9;&#x9;long sleepDuration = capsuleInst.config.maxWaitForReply;&#xD;&#xA;#endif&#xD;&#xA;&#x9;&#x9;&#x9;// Keep the server connection open until a reply is received (or a timeout occurs).&#xD;&#xA;&#x9;&#x9;&#x9;while(sendReply.empty()){&#xD;&#xA;&#x9;&#x9;&#x9;std::this_thread::sleep_for(std::chrono::milliseconds(sleepDuration));&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;clientSock.write( sendReply.c_str(), sendReply.length());&#xD;&#xA;&#x9;&#x9;&#x9;clientSock.write( NL.c_str(), NL.length());&#xD;&#xA;&#x9;&#x9;&#x9;sendReply.clear();&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;clientSock.close();&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;virtual void reply(const std::string&amp; msg) {&#xD;&#xA;&#x9;&#x9;sendReply = msg;&#xD;&#xA;&#x9;}&#x9;&#xD;&#xA;&#xD;&#xA;&#x9;virtual void replyStatus(Status status, const std::string&amp; msg, const std::string&amp; result) {&#xD;&#xA;&#x9;&#x9;std::string s = &quot;ok&quot;;&#xD;&#xA;&#x9;&#x9;if (status == Status::Error) {&#xD;&#xA;&#x9;&#x9;&#x9;s = &quot;error&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;std::cout &lt;&lt; s &lt;&lt; &quot;: &quot; &lt;&lt; msg &lt;&lt; std::endl;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;std::string str = &quot;{\&quot;status\&quot;:\&quot;&quot; + s + &quot;\&quot;, \&quot;msg\&quot;:\&quot;&quot; + msg + &quot;\&quot;&quot;;&#xD;&#xA;&#x9;&#x9;if (!result.empty()) {&#xD;&#xA;&#x9;&#x9;&#x9;str.append(&quot;, \&quot;result\&quot;: &quot;);&#xD;&#xA;&#x9;&#x9;&#x9;str.append(result);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;str.append(&quot;}&quot;);&#xD;&#xA;&#x9;&#x9;reply(str);&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;virtual void replyStatus(Status status, const std::string&amp; msg) {&#xD;&#xA;&#x9;&#x9;replyStatus(status, msg, &quot;&quot;);&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;virtual void replyHTTPStatus(Status status, const std::string&amp; result) {&#xD;&#xA;&#x9;&#x9;std::string str = &quot;HTTP/1.1 200 OK\n&quot;;&#xD;&#xA;&#x9;&#x9;str.append(&quot;Content-Type: application/json\n&quot;);&#xD;&#xA;&#x9;&#x9;str.append(&quot;Access-Control-Allow-Origin: *\n&quot;);&#xD;&#xA;&#x9;&#x9;str.append(&quot;Content-Length: &quot; + std::to_string(result.size()));&#xD;&#xA;&#x9;&#x9;str.append(&quot;\n\n&quot;);&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;str.append(result);&#xD;&#xA;&#x9;&#x9;reply(str);&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;};&#xD;&#xA;"/>
    <publicDeclarations xmi:id="_5rMyxO5TEeitL-zKjjNp2A" body="friend class LocalServerConnection;"/>
  </CppPropertySets:GeneralCapsuleProperties>
  <UMLRealTime:RTPort xmi:id="_5rNZ0e5TEeitL-zKjjNp2A" isWired="false" base_Port="_5rHTO-5TEeitL-zKjjNp2A"/>
  <UMLRealTime:RTPort xmi:id="_5rNZ0u5TEeitL-zKjjNp2A" base_Port="_5rHTPO5TEeitL-zKjjNp2A"/>
  <CppPropertySets:GeneralOperationProperties xmi:id="_5rNZ0-5TEeitL-zKjjNp2A" base_Operation="_5rH6Q-5TEeitL-zKjjNp2A" polymorphic="true"/>
  <CppPropertySets:GeneralParameterProperties xmi:id="_5rNZ1O5TEeitL-zKjjNp2A" base_Parameter="_5rH6Re5TEeitL-zKjjNp2A" nativeType="const std::string&amp;"/>
  <CppPropertySets:GeneralParameterProperties xmi:id="_5rNZ1e5TEeitL-zKjjNp2A" base_Parameter="_5rH6R-5TEeitL-zKjjNp2A" nativeType="const std::string&amp;"/>
  <CppPropertySets:GeneralParameterProperties xmi:id="_5rNZ1u5TEeitL-zKjjNp2A" base_Parameter="_5rH6SO5TEeitL-zKjjNp2A" nativeType="ITCPConnection*"/>
  <CppPropertySets:GeneralOperationProperties xmi:id="_5rNZ1-5TEeitL-zKjjNp2A" base_Operation="_5rH6Se5TEeitL-zKjjNp2A" polymorphic="true"/>
  <CppPropertySets:GeneralParameterProperties xmi:id="_5rOA4O5TEeitL-zKjjNp2A" base_Parameter="_5rH6Su5TEeitL-zKjjNp2A" nativeType="const std::string&amp;"/>
  <CppPropertySets:GeneralParameterProperties xmi:id="_5rOA4e5TEeitL-zKjjNp2A" base_Parameter="_5rH6S-5TEeitL-zKjjNp2A" nativeType="ITCPConnection*"/>
  <Standard:Auxiliary xmi:id="_5rOn8O5TEeitL-zKjjNp2A" base_Class="_5rKWgO5TEeitL-zKjjNp2A"/>
  <CppPropertySets:GeneralInterfaceProperties xmi:id="_Vq8JMO5WEeitL-zKjjNp2A" base_Interface="_Vq7iIO5WEeitL-zKjjNp2A">
    <headerPreface xmi:id="_Vq8JMe5WEeitL-zKjjNp2A" body="#include &lt;string>"/>
  </CppPropertySets:GeneralInterfaceProperties>
  <CppPropertySets:GeneralParameterProperties xmi:id="_Vq8JMu5WEeitL-zKjjNp2A" base_Parameter="_Vq7iIu5WEeitL-zKjjNp2A" nativeType="const std::string&amp;"/>
  <UMLRealTime:ProtocolContainer xmi:id="_ZJ5t8O5XEeitL-zKjjNp2A" base_Package="_ZJ5G4O5XEeitL-zKjjNp2A"/>
  <UMLRealTime:Protocol xmi:id="_ZJ6VAO5XEeitL-zKjjNp2A" base_Collaboration="_ZJ5G4e5XEeitL-zKjjNp2A"/>
  <UMLRealTime:InEvent xmi:id="_ZJ6VAe5XEeitL-zKjjNp2A" base_CallEvent="_ZJ5G7e5XEeitL-zKjjNp2A"/>
  <CppPropertySets:GeneralParameterProperties xmi:id="_UPBpMO50EeitL-zKjjNp2A" base_Parameter="_UPAbEe50EeitL-zKjjNp2A" nativeType="const std::string&amp;"/>
  <CppPropertySets:GeneralParameterProperties xmi:id="_9Y0HAPFTEeiGPObbQ5S9rA" base_Parameter="_9Yy44PFTEeiGPObbQ5S9rA" nativeType="const std::string&amp;"/>
  <CppPropertySets:GeneralParameterProperties xmi:id="_sj5i4PFUEeiGPObbQ5S9rA" base_Parameter="_sj470vFUEeiGPObbQ5S9rA" nativeType="const std::string&amp;"/>
  <CppPropertySets:GeneralOperationProperties xmi:id="_lBm2UPF5EeiGPObbQ5S9rA" base_Operation="_j8WecPF5EeiGPObbQ5S9rA" polymorphic="true"/>
  <CppPropertySets:GeneralAttributeProperties xmi:id="_d90I0PGMEeiGPObbQ5S9rA" base_Property="_btFcUPGMEeiGPObbQ5S9rA" nativeType="std::string"/>
  <CppPropertySets:GeneralClassProperties xmi:id="_s-LUMPGNEeiGPObbQ5S9rA" base_Class="_5rKWgO5TEeitL-zKjjNp2A">
    <headerPreface xmi:id="_s-NJYPGNEeiGPObbQ5S9rA" body="#include &lt;string>"/>
  </CppPropertySets:GeneralClassProperties>
  <CppPropertySets:GeneralOperationProperties xmi:id="_gi1wsPGUEeiGPObbQ5S9rA" base_Operation="_dbgzYPGUEeiGPObbQ5S9rA" polymorphic="true"/>
  <CppPropertySets:GeneralArtifactProperties xmi:id="_mg90kPJbEeiUbIS8Ru5zVw" base_Artifact="_t7DdAPJaEeiUbIS8Ru5zVw">
    <Header xmi:id="_mhBe8PJbEeiUbIS8Ru5zVw" body="#ifndef __RTJsonDecoding_h__&#xD;&#xA;#define __RTJsonDecoding_h__ included&#xD;&#xA;&#xD;&#xA;#ifndef __RTDecoding_h__&#xD;&#xA;#include &lt;RTDecoding.h>&#xD;&#xA;#endif&#xD;&#xA;#include &lt;string>&#xD;&#xA;#include &lt;utility>&#xD;&#xA;#include &lt;map>&#xD;&#xA;#include &lt;RTAsciiDecoding.h>&#xD;&#xA;&#xD;&#xA;class RTJsonDecoding : public RTAsciiDecoding&#xD;&#xA;{&#xD;&#xA;public:&#xD;&#xA;    explicit RTJsonDecoding(RTIBuffer *);&#xD;&#xA;    virtual ~RTJsonDecoding(void);&#xD;&#xA;&#xD;&#xA;    // All the get/put functions return an int which is non-zero&#xD;&#xA;    // if the operation was successful. Otherwise, the following&#xD;&#xA;    // function may be called to discover the reason for the&#xD;&#xA;    // failure.&#xD;&#xA;    int         getError( void );&#xD;&#xA;    void decodeJsonString(std::string str, std::map&lt;std::string, std::string>&amp; mp);&#xD;&#xA;&#xD;&#xA;    virtual int get( void **, const RTObject_class ** );&#xD;&#xA;&#xD;&#xA;    // basic data types&#xD;&#xA;    virtual int get_address ( void         * &amp; );&#xD;&#xA;    virtual int get_bool    ( bool           &amp; );&#xD;&#xA;    virtual int get_char    ( char           &amp; );&#xD;&#xA;#if RTUseFloatingPoint&#xD;&#xA;    virtual int get_double  ( double         &amp; );&#xD;&#xA;    virtual int get_float   ( float          &amp; );&#xD;&#xA;#endif&#xD;&#xA;    virtual int get_int     ( int            &amp; );&#xD;&#xA;    virtual int get_long    ( long           &amp; );&#xD;&#xA;&#xD;&#xA;&#x9;virtual int get_unsignedint( unsigned int &amp; );&#xD;&#xA;&#x9;virtual int get_unsignedlong( unsigned long &amp; );&#xD;&#xA;&#x9;virtual int get_unsignedshort( unsigned short &amp; );&#xD;&#xA;&#x9;virtual int get_unsignedchar( unsigned char &amp; );&#xD;&#xA;#if 0&#xD;&#xA;#if _MSC_VER > 1000&#xD;&#xA;    virtual int get_long_long( __int64 &amp;  );&#xD;&#xA;#else&#xD;&#xA;    virtual int get_long_long( long long &amp;  );&#xD;&#xA;#endif&#xD;&#xA;#endif&#xD;&#xA;&#xD;&#xA;    virtual int get_short   ( short          &amp; );&#xD;&#xA;    virtual int get_uchar   ( unsigned char  &amp; );&#xD;&#xA;    virtual int get_unsigned( unsigned       &amp; );&#xD;&#xA;    virtual int get_ulong   ( unsigned long  &amp; );&#xD;&#xA;    virtual int get_ushort  ( unsigned short &amp; );&#xD;&#xA;&#xD;&#xA;    // a nul-terminated string&#xD;&#xA;    virtual int get_string( char * &amp; );&#xD;&#xA;&#xD;&#xA;    // zero or more raw bytes&#xD;&#xA;    virtual int get_opaque( int &amp;, char * &amp; );&#xD;&#xA;&#xD;&#xA;    // an enumerated value&#xD;&#xA;    virtual int get_enum( int &amp;, int, const RTFieldDescriptor * );&#xD;&#xA;&#xD;&#xA;    // a homogeneous array of objects&#xD;&#xA;    virtual int get_array( void *, int, const RTObject_class * );&#xD;&#xA;&#xD;&#xA;    // an indirect object&#xD;&#xA;    virtual int get_indirect( void *, const RTObject_class * );&#xD;&#xA;&#xD;&#xA;    // a structure&#xD;&#xA;    virtual int get_struct( void *, const RTObject_class * );&#xD;&#xA;&#xD;&#xA;protected:&#xD;&#xA;    int                 getName( char * value, int length );&#xD;&#xA;    RTUnknownObject   * getUnknown( const char * );&#xD;&#xA;&#xD;&#xA;private:&#xD;&#xA;    enum              { UngetMax = 3 };&#xD;&#xA;&#xD;&#xA;    int                 unget_size;&#xD;&#xA;    char                unget_buffer[ UngetMax ];&#xD;&#xA;&#xD;&#xA;    // unavailable methods&#xD;&#xA;    RTJsonDecoding( const RTJsonDecoding &amp; );&#xD;&#xA;    RTJsonDecoding &amp; operator=( const RTJsonDecoding &amp; );&#xD;&#xA;    std::string removeQuotes(const std::string&amp; s);&#xD;&#xA;}; //lint !e1712&#xD;&#xA;&#xD;&#xA;#endif // __RTJsonDecoding_h__"/>
    <Implementation xmi:id="_mhCtEPJbEeiUbIS8Ru5zVw" body="#include &lt;RTJsonDecoding.h>&#xD;&#xA;#include &lt;RTObject_class.h>&#xD;&#xA;#include &lt;RTUnknownObject.h>&#xD;&#xA;#include &lt;iostream>&#xD;&#xA;&#xD;&#xA;RTJsonDecoding::RTJsonDecoding(RTIBuffer * buffer)&#xD;&#xA;    : RTAsciiDecoding(buffer)&#xD;&#xA;{&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;RTJsonDecoding::~RTJsonDecoding() {&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;std::string RTJsonDecoding::removeQuotes(const std::string&amp; s)&#xD;&#xA;{&#xD;&#xA;&#x9;if(s.find('&quot;') == s.npos)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;return s;&#xD;&#xA;&#x9;}&#xD;&#xA;    auto start = s.begin();&#xD;&#xA;    while (start != s.end() &amp;&amp; *start != '&quot;') {&#xD;&#xA;        start++;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    auto end = s.end();&#xD;&#xA;    do {&#xD;&#xA;        end--;&#xD;&#xA;    } while (std::distance(start, end) > 0 &amp;&amp; *end != '&quot;');&#xD;&#xA;&#xD;&#xA;    return std::string(start+1, end);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;void RTJsonDecoding::decodeJsonString(std::string str, std::map&lt;std::string, std::string>&amp; mp)&#xD;&#xA;{&#xD;&#xA;&#x9;std::string delimiters = &quot;{,:}&quot;;&#xD;&#xA;&#x9;std::string first, second;&#xD;&#xA;&#x9;std::size_t pos = 0;&#xD;&#xA;&#x9;bool b = true;&#xD;&#xA;&#x9;mp.clear();&#xD;&#xA;&#x9;for (std::size_t i = 0; i &lt; str.size(); ++i)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;if (delimiters.find(str[i]) != delimiters.npos)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;if (b) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;second = str.substr(pos, i - pos);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;b = false;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;first = str.substr(pos, i - pos);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;b = true;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;++i;&#xD;&#xA;&#x9;&#x9;&#x9;pos = i;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;if (!first.empty() &amp;&amp; !second.empty())&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;first = removeQuotes(first);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;second = removeQuotes(second);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;mp.insert(std::pair&lt;std::string, std::string>(first, second));&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;first.clear();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;second.clear();&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;int RTJsonDecoding::get( void ** data, RTObject_class const ** type ) {&#xD;&#xA;    return 1; // Success!&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;int RTJsonDecoding::get_int( int &amp; value ) {&#xD;&#xA;&#x9;long tmp = 0;&#xD;&#xA;&#x9;int res = get_long(tmp);&#xD;&#xA;&#x9;value = (int) tmp;&#xD;&#xA;&#x9;return res;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;int RTJsonDecoding::get_long( long &amp; value ) {&#xD;&#xA;&#x9;return 0;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;int RTJsonDecoding::get_bool( bool &amp; value ) {&#xD;&#xA;&#x9;return 0;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;int RTJsonDecoding::get_address( void * &amp; address ) {&#xD;&#xA;&#x9;return 0;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;int RTJsonDecoding::get_char( char &amp; value ) {&#xD;&#xA;&#x9;return 0;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;int RTJsonDecoding::get_double( double &amp; value ) {&#xD;&#xA;&#x9;return 0;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;int RTJsonDecoding::get_float( float &amp; value ) {&#xD;&#xA;&#x9;return 0;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;int RTJsonDecoding::get_unsignedint( unsigned int &amp; value ) {&#xD;&#xA;&#x9;return 0;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;int RTJsonDecoding::get_unsignedlong( unsigned long &amp; value ) {&#xD;&#xA;&#x9;return 0;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;int RTJsonDecoding::get_unsignedshort( unsigned short &amp; value ) {&#xD;&#xA;&#x9;return 0;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;int RTJsonDecoding::get_unsignedchar( unsigned char &amp; value ) {&#xD;&#xA;&#x9;return 0;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;int RTJsonDecoding::get_short( short &amp; value ) {&#xD;&#xA;&#x9;return 0;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;int RTJsonDecoding::get_uchar( unsigned char &amp; value ) {&#xD;&#xA;&#x9;return 0;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;int RTJsonDecoding::get_unsigned( unsigned &amp; value ) {&#xD;&#xA;&#x9;return 0;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;int RTJsonDecoding::get_ulong( unsigned long &amp; value ) {&#xD;&#xA;&#x9;return 0;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;int RTJsonDecoding::get_ushort( unsigned short &amp; value ) {&#xD;&#xA;&#x9;return 0;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;int RTJsonDecoding::get_opaque( int &amp; value_size, char * &amp; value ) {&#xD;&#xA;&#x9;return 0;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;int RTJsonDecoding::get_string( char * &amp; value ) {&#xD;&#xA;&#x9;return 0;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;int RTJsonDecoding::get_enum( int &amp; value, int numElements, const RTFieldDescriptor * element ) {&#xD;&#xA;&#x9;return 0;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;int RTJsonDecoding::get_array( void * target, int size, const RTObject_class * element ) {&#xD;&#xA;&#x9;return 0;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;int RTJsonDecoding::get_indirect( void * pointer, const RTObject_class * target ) {&#xD;&#xA;&#x9;return 0;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;int RTJsonDecoding::get_struct( void * target, const RTObject_class * record ) {&#xD;&#xA;&#x9;return 0;&#xD;&#xA;}"/>
  </CppPropertySets:GeneralArtifactProperties>
  <CppPropertySets:GeneralDependencyProperties xmi:id="_al5PoPLdEeiUbIS8Ru5zVw" base_Dependency="_ZmbWsPLdEeiUbIS8Ru5zVw" kindInHeader="none"/>
  <CppPropertySets:GeneralParameterProperties xmi:id="_YPeFkHxrEemQvv1wPLSA6g" base_Parameter="_YPbpUXxrEemQvv1wPLSA6g" nativeType="const std::string&amp;"/>
  <CppPropertySets:GeneralParameterProperties xmi:id="_ETXVQLqtEem5vPW57wwiFQ" base_Parameter="_ETGPgLqtEem5vPW57wwiFQ" nativeType="std::string"/>
  <CppPropertySets:GeneralParameterProperties xmi:id="_8Mvo8Mr-Eemd-cvOi0spQQ" base_Parameter="_8MtMssr-Eemd-cvOi0spQQ" nativeType="const std::string&amp;"/>
</xmi:XMI>
